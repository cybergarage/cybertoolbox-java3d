options {
  STATIC = false;
  LOOKAHEAD = 1;
  DEBUG_PARSER = false;
  ERROR_REPORTING = true;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(DXFParser)

package cv97.parser.autodesk;

import java.io.*;

import cv97.*;
import cv97.node.*;
import cv97.field.*;
import cv97.util.*;

public class DXFParser {

	private RootNode		mRootNode;
	private ShapeNode		mCurrentShapeNode;
	
	private boolean		mHasFaceColor;
	private float			mPrevFaceColor[] = new float[3];
	private int				mSolidFaceCount;
		
	public DXFParser () {
	}

	public void initialize() {
		mRootNode = new RootNode();
		setCurrentShapeNode(null);
	}

	public ShapeNode createShapeNode() {
		ShapeNode shape = new ShapeNode();
		IndexedFaceSetNode idxFaceSetNode = new IndexedFaceSetNode();
		shape.addChildNode(idxFaceSetNode);
		idxFaceSetNode.addChildNode(new CoordinateNode());
		idxFaceSetNode.addChildNode(new ColorNode());
		idxFaceSetNode.addChildNode(new NormalNode());
		idxFaceSetNode.setColorPerVertex(false);
		idxFaceSetNode.setNormalPerVertex(true);
		return shape;
	}

	public int getNShapeNodes() {
		return mRootNode.getNChildNodes();
	}

	public ShapeNode getShapeNodes() {
		return mRootNode.getShapeNodes();
	}

	public ShapeNode getShapeNode(String name) {
		return mRootNode.getShapeNode(name);
	}

	public void addShapeNode(ShapeNode node) {
		mRootNode.addChildNode(node);
	}


	public void setCurrentShapeNode(ShapeNode node) {
		mCurrentShapeNode = node;
	}

	public ShapeNode getCurrentShapeNode() {
		return mCurrentShapeNode;
	}

	private IndexedFaceSetNode getCurrentIndexedFaceSetNode() {
		return getCurrentShapeNode().getIndexedFaceSetNodes();
	} 

	private CoordinateNode getCurrentCoordinateNode() {
		return getCurrentIndexedFaceSetNode().getCoordinateNodes();
	}

	private ColorNode getCurrentColorNode() {
		return getCurrentIndexedFaceSetNode().getColorNodes();
	}

	private NormalNode getCurrentNormalNode() {
		return getCurrentIndexedFaceSetNode().getNormalNodes();
	}

	private int getNCurrentCoordinateNodePoints() {
		return getCurrentIndexedFaceSetNode().getCoordinateNodes().getNPoints();
	}
	
	private void addCoordinate(float x, float y, float z) {
		getCurrentCoordinateNode().addPoint(x, y, z);
	}

	private void addCoordinate(float point[]) {
		getCurrentCoordinateNode().addPoint(point);
	}

	private void addColor(float r, float g, float b) {
		getCurrentColorNode().addColor(r, g, b);
	}

	private void addNormal(float x, float y, float z) {
		getCurrentNormalNode().addVector(x, y, z);
	}


	private void addCoordIndex(int index) {
		getCurrentIndexedFaceSetNode().addCoordIndex(index);
	}

	public int getNCoordIndices() {
		return getCurrentIndexedFaceSetNode().getNCoordIndices();
	}

	public int getCoordIndex(int n) {
		return getCurrentIndexedFaceSetNode().getCoordIndex(n);
	}
			
	
	private void addNormalIndex(int index) {
		getCurrentIndexedFaceSetNode().addNormalIndex(index);
	}
	public int getNNormalIndices() {
		return getCurrentIndexedFaceSetNode().getNNormalIndices();
	}

	public int getNormalIndex(int n) {
		return getCurrentIndexedFaceSetNode().getNormalIndex(n);
	}


	private void addTexCoordIndex(int index) {
		getCurrentIndexedFaceSetNode().addTexCoordIndex(index);
	}

	public int getNTexCoordIndices() {
		return getCurrentIndexedFaceSetNode().getNTexCoordIndices();
	}

	public int getTexCoordIndex(int n) {
		return getCurrentIndexedFaceSetNode().getTexCoordIndex(n);
	}


	public int getN3DFaceVertices(float point[][]) {
		for (int n=0; n<3; n++) {
			if (point[2][n] != point[3][n])
				return 4;
		}
		return 3;
	}
}

PARSER_END(DXFParser)

///////////////////////////////////////////////
//	SKIP
///////////////////////////////////////////////

SKIP :
{
  " "
| "\t"
| "\r"
| <COMMENT : "999" ("\n" | "\r\n") (~["\n", "\r"])* ("\n" | "\r\n") >
}

///////////////////////////////////////////////
//
//	Group Tokens
//
///////////////////////////////////////////////

TOKEN :
{
	< GROUP0	: "0" <EOL>>
|	< GROUP2	: "2" <EOL>>
|	< GROUP8	: "8" <EOL>>
}

TOKEN :
{
	< SECTION	: "SECTION" <EOL>>
|	< ENDSEC		: "ENDSEC" <EOL>>
|	< ENTITIES	: "ENTITIES" <EOL>>
|	< HEADER		: "HEADER" <EOL>>
|	< FACE3D		: "3DFACE" <EOL>>
}

///////////////////////////////////////////////
//	IntegerToken / FloatToken / NameToken
///////////////////////////////////////////////

int IndexToken() :
{
	Token t;
}
{
	t=<INDEX>
		{
			return Integer.parseInt(t.image);
		}
}

int NumberToken() :
{
	Token t;
}
{
	t=<NUMBER>
		{
			return Integer.parseInt(t.image);
		}
}

int IntegerToken() :
{
	Token t;
}
{
	t=<NUMBER>
		{
			return Integer.parseInt(t.image);
		}
}

float FloatToken() :
{
	Token t;
}
{
	t=<VALUE>
		{
			return Float.parseFloat(t.image);
		}
}

float[] ColorToken() :
{
	String	colorString;
	int		colorValue;
	float		color[];
	Token		t;
}
{
	t=<COLOR>
		{
			colorString = t.image.substring(2);
			colorValue = Integer.parseInt(colorString, 16);
			Debug.message("color = 0x" + Integer.toHexString(colorValue));
			color = new float[3];
			if (colorString.length() == 3) {
				color[0] = (float)((colorValue & 0xF00) >> 8)/ 127.0f;
				color[1] = (float)((colorValue & 0x0F0) >> 4)/ 127.0f;
				color[2] = (float)((colorValue & 0x00F) >> 0)/ 127.0f;
			}
			else {
				color[0] = (float)((colorValue & 0xFF0000) >> 16)/ 255.0f;
				color[1] = (float)((colorValue & 0x00FF00) >> 8 )/ 255.0f;
				color[2] = (float)((colorValue & 0x0000FF) >> 0 )/ 255.0f;
			}
			return color;
		}
}

String NameToken() :
{
	Token	t;
}
{
	t=<STRING>
		{
			return t.image;
		}
}

///////////////////////////////////////////////
// DXF
///////////////////////////////////////////////

void DXF() :
{
}
{
	(DXFElement())*
}

void DXFElement() :
{
}
{
	LOOKAHEAD(4) <GROUP0> <SECTION> <GROUP2> <HEADER> <GROUP0> <ENDSEC>
|	LOOKAHEAD(4) <GROUP0> <SECTION> <GROUP2> <ENTITIES> EntitiesSection()
|	LOOKAHEAD(2) <GROUP0> "EOF" <EOL>
}

///////////////////////////////////////////////
//	Layer(8)
///////////////////////////////////////////////

String Layer() :
{
	String name;
}
{
	<GROUP8> 
	name=NameToken() <EOL>
		{
			ShapeNode shapeNode = getShapeNode(name);
			if (shapeNode == null) {
				shapeNode = createShapeNode();
				shapeNode.setName(name);
				addShapeNode(shapeNode);
			}
			setCurrentShapeNode(shapeNode);
			return name;
		}
}

///////////////////////////////////////////////
//	ColorIndex(62)
///////////////////////////////////////////////

int ColorIndex() :
{
	int index;
}
{
	"62" <EOL> 
	index=IndexToken() <EOL>
		{
			return index;
		}
}

/////////////////////////////////////////////////////
//	Vertex(10/20/30 - 11/21/31 - 12/22/32 - 13/23/33)
/////////////////////////////////////////////////////

float Vertex10() :
{
	float pos;
}
{
	"10" <EOL> 
	pos=FloatToken() <EOL>
		{
			return pos;
		}
}

float Vertex20() :
{
	float pos;
}
{
	"20" <EOL> 
	pos=FloatToken() <EOL>
		{
			return pos;
		}
}

float Vertex30() :
{
	float pos;
}
{
	"30" <EOL> 
	pos=FloatToken() <EOL>
		{
			return pos;
		}
}

float Vertex11() :
{
	float pos;
}
{
	"11" <EOL> 
	pos=FloatToken() <EOL>
		{
			return pos;
		}
}

float Vertex21() :
{
	float pos;
}
{
	"21" <EOL> 
	pos=FloatToken() <EOL>
		{
			return pos;
		}
}

float Vertex31() :
{
	float pos;
}
{
	"31" <EOL> 
	pos=FloatToken() <EOL>
		{
			return pos;
		}
}

float Vertex12() :
{
	float pos;
}
{
	"12" <EOL> 
	pos=FloatToken() <EOL>
		{
			return pos;
		}
}

float Vertex22() :
{
	float pos;
}
{
	"22" <EOL> 
	pos=FloatToken() <EOL>
		{
			return pos;
		}
}

float Vertex32() :
{
	float pos;
}
{
	"32" <EOL> 
	pos=FloatToken() <EOL>
		{
			return pos;
		}
}

float Vertex13() :
{
	float pos;
}
{
	"13" <EOL> 
	pos=FloatToken() <EOL>
		{
			return pos;
		}
}

float Vertex23() :
{
	float pos;
}
{
	"23" <EOL> 
	pos=FloatToken() <EOL>
		{
			return pos;
		}
}

float Vertex33() :
{
	float pos;
}
{
	"33" <EOL> 
	pos=FloatToken() <EOL>
		{
			return pos;
		}
}

///////////////////////////////////////////////
//
//	Section
//
///////////////////////////////////////////////

///////////////////////////////////////////////
//	Entities Section
///////////////////////////////////////////////

void EntitiesSection() :
{
}
{
	(<GROUP0> Face3DSection())* <GROUP0> <ENDSEC>
	{
	}
}

///////////////////////////////////////////////
//	Face3D Section
///////////////////////////////////////////////

float [][]Face3DVertices() :
{
	float p4[][]	= new float[4][3];
}
{
	p4[0][0]=Vertex10() p4[0][1]=Vertex20() p4[0][2]=Vertex30()
	p4[1][0]=Vertex11() p4[1][1]=Vertex21() p4[1][2]=Vertex31()
	p4[2][0]=Vertex12() p4[2][1]=Vertex22() p4[2][2]=Vertex32()
	p4[3][0]=Vertex13() p4[3][1]=Vertex23() p4[3][2]=Vertex33()
	{
		return p4;
	}
}

void Face3DSection() :
{
	String	layer			= null;
	int		colorIndex	= -1;
	float		point[][]		= null;
}
{
	<FACE3D> 
	(layer = Layer())?
	(colorIndex = ColorIndex())?
	point = Face3DVertices()
	{
		int n3DFaceVertices = getN3DFaceVertices(point);
		for (int n=0; n<n3DFaceVertices; n++)
			addCoordinate(point[n]);
		int nCoordPoints = getNCurrentCoordinateNodePoints();
		for (int n=0; n<n3DFaceVertices; n++)
			addCoordIndex(n + nCoordPoints);
		addCoordIndex(-1);
	}
}

///////////////////////////////////////////////
//
//	General Tokens
//
///////////////////////////////////////////////

TOKEN :
{
	< INDEX			:	( ["0"-"9"] )+ >
|	< NUMBER			:	( ["1"-"9"] ) ( ["0"-"9"] )* >
|	< STRING			:	( ["0"-"9","A"-"Z","a"-"z"]) (["0"-"9","A"-"Z","a"-"z","_","-","(",")"])* >
|	< VALUE			:	(["+","-"])?(["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
							| (["+","-"])?"." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
							| (["+","-"])?(["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
	>
|	< EXPONENT		:	["e","E"] (["+","-"])? (["0"-"9"])+ >
|	< COLOR			: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|	< EOL				: ("\n" | "\r\n")>
}

void Input() :
{}
{
  DXF() <EOF>
}
