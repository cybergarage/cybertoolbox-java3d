/* Generated By:JavaCC: Do not edit this line. X3DParser.java */
package cv97.parser.x3d;

import java.io.*;
import cv97.*;
import cv97.field.*;
import cv97.node.*;
import cv97.util.*;
import cv97.route.*;
import cv97.xml.*;

public class X3DParser implements X3DParserConstants {

        public NodeList mNodeList               = new NodeList();
        public LinkedList       mNodeStackList  = new LinkedList();
        public int                      mIndentLevel    = 0;

        boolean bvalue;

        public X3DParser () {
        }

        public NodeList getNodeList() {
                return mNodeList;
        }

        public Node getRootNode() {
                return (Node)mNodeList.getRootNode();
        }

        public Node getNodes() {
                return (Node)mNodeList.getNodes();
        }

        public void addNode(Node node) {
                Node parentNode = getCurrentNode();
                if (parentNode == null)
                        mNodeList.addNode(node);
                else
                        parentNode.addChildNode(node);

                node.setParentNode(parentNode);
        }

        public void clearNodes() {
                mNodeList.deleteNodes();
        }

        ////////////////////////////////////////////////
        //	find node
        ////////////////////////////////////////////////

        public Node findNodeByType(String typeName) {
                Node rootNode = getRootNode();
                return rootNode.nextTraversalByType(typeName);
        }

        public Node findNodeByName(String name) {
                Node rootNode = getRootNode();
                return rootNode.nextTraversalByName(name);
        }

        ///////////////////////////////////////////////
        //	Praser action
        ///////////////////////////////////////////////

        public void PushNode(Node node)
        {
                X3DStackNode parserNode = new X3DStackNode(node);
                mNodeStackList.addNode(parserNode);
        }

        public Node PopNode()
        {
                X3DStackNode lastNode = (X3DStackNode)mNodeStackList.getLastNode();
                lastNode.remove();
                return lastNode.getObject();
        }

        public Node getCurrentNode() {
                X3DStackNode lastNode = (X3DStackNode)mNodeStackList.getLastNode();
                if (lastNode == null)
                        return null;
                else
                        return lastNode.getObject();
        }

        ///////////////////////////////////////////////
        //	Instance Node
        ///////////////////////////////////////////////

        public void setCurrentNodeAsInstance(String nodeName)
        {
                Node currNode = getCurrentNode();

                if (currNode != null)
                        currNode.remove();

                PopNode();

                Node defNode = findNodeByName(nodeName);

                Node instanceNode = null;
                if (defNode != null) {
                        instanceNode = defNode.createInstanceNode();
                        addNode(instanceNode);
                }

                PushNode(instanceNode);
        }

        ///////////////////////////////////////////////
        //	ROUTE INFO
        ///////////////////////////////////////////////

        public RouteInfo routeInfo = null;

        public void setRouteInfo(RouteInfo info)
        {
                routeInfo = info;
        }

        public RouteInfo getRouteInfo()
        {
                return routeInfo;
        }

        ///////////////////////////////////////////////
        //	ROUTE
        ///////////////////////////////////////////////

        public LinkedList       mRouteList              = new LinkedList();

        public Route getRoutes() {
                return (Route)mRouteList.getNodes();
        }

        public Route getRoute(Node eventOutNode, Field eventOutField, Node eventInNode, Field eventInField)
        {
                for (Route route=getRoutes(); route!=null; route=route.next()) {
                        if (eventOutNode == route.getEventOutNode() && eventOutField == route.getEventOutField() &&
                                eventInNode == route.getEventInNode() && eventInField == route.getEventInField() ) {
                                return route;
                        }
                }
                return null;
        }

        public void addRoute(Route route) {
                if (route.getEventOutNode() == route.getEventInNode())
                        return;
                if (getRoute(route.getEventOutNode(), route.getEventOutField(), route.getEventInNode(), route.getEventInField()) != null)
                        return;
                mRouteList.addNode(route);
        }

        public void addRoute(String eventOutNodeName, String eventOutFieldName, String eventInNodeName, String eventInFieldName)
        {
                Node eventInNode = findNodeByName(eventInNodeName);
                Node eventOutNode = findNodeByName(eventOutNodeName);

                Field eventOutField = null;

                if (eventOutNode != null) {
                        try {
                                eventOutField = ((Node)eventOutNode).getEventOut(eventOutFieldName);
                        }
                        catch (InvalidEventOutException eventOutException) {
                                try {
                                        eventOutField = eventOutNode.getExposedField(eventOutFieldName);
                                }
                                catch (InvalidExposedFieldException exposedFieldException) {}
                        }
                }

                Field eventInField = null;

                if (eventInNode != null) {
                        try {
                                eventInField = eventInNode.getEventIn(eventInFieldName);
                        }
                        catch (InvalidEventInException eventInException) {
                                try {
                                        eventInField = eventInNode.getExposedField(eventInFieldName);
                                }
                                catch (InvalidExposedFieldException exposedFieldException) {}
                        }
                }

                Route route = new Route(eventOutNode, eventOutField, eventInNode, eventInField);
                addRoute(route);
        }

        public void addRoute(RouteInfo info)
        {
                addRoute(info.getFromNodeName(), info.getFromFieldName(), info.getToNodeName(), info.getToFieldName());
        }

        public void deleteRoute(Node eventOutNode, Field eventOutField, Node eventInNode, Field eventInField)
        {
                Route route = getRoute(eventOutNode, eventOutField, eventInNode, eventInField);
                if (route!=null)
                        route.remove();
        }

        public void deleteRoute(Route deleteRoute)
        {
                for (Route route=getRoutes(); route!=null; route=route.next()) {
                        if (deleteRoute == route) {
                                route.remove();
                                return;
                        }
                }
        }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ENTITY % FieldTypes "( Boolean | Booleans | Color | Colors | Float | Floats | Image |
//                          Int | Ints | Rotation | Rotations | String | Strings | Time | Times | 
//                          Vector3 | Vector3Array | Vector4 | Vector4Array )" >
/////////////////////////////////////////////////////////////////////////////////////////////////////
/*
void FieldTypes() :
{}
{
	Boolean()
|	Booleans()
|	Color()
|	Colors()
|	Float()
|	Floats()
|	Int()
|	Ints()
|	Rotation()
|	Rotations()
|	Time()
|	Times()
|	Vector3()
|	Vector3Array()
|	Vector4()
|	Vector4Array()
}
*/
/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ENTITY % BehaviorLeafNodes " ColorInterpolator | CoordinateInterpolator | CylinderSensor |
//                                NormalInterpolator | OrientationInterpolator | PlaneSensor | 
//                                PositionInterpolator | ProximitySensor | ScalarInterpolator | 
//                                Script | SphereSensor | TimeSensor | TouchSensor " >
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void BehaviorLeafNodes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 68:
      ColorInterpolator();
      break;
    case 79:
      CoordinateInterpolator();
      break;
    case 91:
      CylinderSensor();
      break;
    case 172:
      NormalInterpolator();
      break;
    case 174:
      OrientationInterpolator();
      break;
    case 180:
      PlaneSensor();
      break;
    case 188:
      PositionInterpolator();
      break;
    case 193:
      ProximitySensor();
      break;
    case 197:
      ScalarInterpolator();
      break;
    case 201:
      Script();
      break;
    case 217:
      SphereSensor();
      break;
    case 239:
      TimeSensor();
      break;
    case 246:
      TouchSensor();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ENTITY % BindableNodes " Background | Fog | NavigationInfo | Viewpoint " >
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void BindableNodes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 49:
      Background();
      break;
    case 121:
      Fog();
      break;
    case 167:
      NavigationInfo();
      break;
    case 253:
      Viewpoint();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ENTITY % CollisionProxyNodes " Anchor | Billboard | Group | Inline | LOD | Switch | Transform " >
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void CollisionProxyNodes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 24:
      Anchor();
      break;
    case 52:
      Billboard();
      break;
    case 133:
      Group();
      break;
    case 147:
      Inline();
      break;
    case 151:
      LOD();
      break;
    case 224:
      Switch();
      break;
    case 249:
      Transform();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ENTITY % GroupingNodes " Anchor | Billboard | Collision | Group | Inline | LOD | Switch | Transform " >
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void GroupingNodes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 24:
      Anchor();
      break;
    case 52:
      Billboard();
      break;
    case 59:
      Collision();
      break;
    case 133:
      Group();
      break;
    case 147:
      Inline();
      break;
    case 151:
      LOD();
      break;
    case 224:
      Switch();
      break;
    case 249:
      Transform();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ENTITY % GeometryNodes " ( Box | Cone | Cylinder | ElevationGrid | Extrusion |
//                              IndexedFaceSet | IndexedLineSet | PointSet | Sphere | Text ) " >
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void GeometryNodes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
      Box();
      break;
    case 74:
      Cone();
      break;
    case 83:
      Cylinder();
      break;
    case 108:
      ElevationGrid();
      break;
    case 117:
      Extrusion();
      break;
    case 143:
      IndexedFaceSet();
      break;
    case 145:
      IndexedLineSet();
      break;
    case 186:
      PointSet();
      break;
    case 213:
      Sphere();
      break;
    case 229:
      Text();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ENTITY % LightNodes " DirectionalLight | SpotLight | PointLight " >
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void LightNodes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 97:
      DirectionalLight();
      break;
    case 221:
      SpotLight();
      break;
    case 184:
      PointLight();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ENTITY % TextureNodes " ImageTexture | MovieTexture | PixelTexture " >
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void TextureNodes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 137:
      ImageTexture();
      break;
    case 161:
      MovieTexture();
      break;
    case 177:
      PixelTexture();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ENTITY % Appearances " ( ( Material?, (%TextureNodes;)?, TextureTransform? ) | 
//                          ( (%TextureNodes;)?, Material?, TextureTransform? ) ) " >
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void Appearances() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 137:
      case 158:
      case 161:
      case 177:
      case 234:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 158:
        Material();
        break;
      case 137:
      case 161:
      case 177:
        TextureNodes();
        break;
      case 234:
        TextureTransform();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ENTITY % SceneLeafNodes " Shape | Sound | WorldInfo | %LightNodes; " >
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void SceneLeafNodes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 203:
      Shape();
      break;
    case 211:
      Sound();
      break;
    case 259:
      WorldInfo();
      break;
    case 97:
    case 184:
    case 221:
      LightNodes();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ENTITY % SceneNodes " (EXTERNPROTO-declare|PROTO-declare)*, 
//                         ( %GroupingNodes; | %BindableNodes; | %BehaviorLeafNodes; | %LightNodes; | WorldInfo |
//                         PROTO-instance )*, Route* " >
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void SceneNodes() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
      case 49:
      case 52:
      case 59:
      case 68:
      case 79:
      case 91:
      case 97:
      case 121:
      case 133:
      case 147:
      case 151:
      case 167:
      case 172:
      case 174:
      case 180:
      case 184:
      case 188:
      case 193:
      case 197:
      case 201:
      case 217:
      case 221:
      case 224:
      case 239:
      case 246:
      case 249:
      case 253:
      case 259:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
      case 52:
      case 59:
      case 133:
      case 147:
      case 151:
      case 224:
      case 249:
        GroupingNodes();
        break;
      case 49:
      case 121:
      case 167:
      case 253:
        BindableNodes();
        break;
      case 68:
      case 79:
      case 91:
      case 172:
      case 174:
      case 180:
      case 188:
      case 193:
      case 197:
      case 201:
      case 217:
      case 239:
      case 246:
        BehaviorLeafNodes();
        break;
      case 97:
      case 184:
      case 221:
        LightNodes();
        break;
      case 259:
        WorldInfo();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 265:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_3;
      }
      Route();
    }
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ENTITY % ChildrenNodes " %BehaviorLeafNodes; | %BindableNodes; | %GroupingNodes; | %SceneLeafNodes; " >
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void ChildrenNodes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 68:
    case 79:
    case 91:
    case 172:
    case 174:
    case 180:
    case 188:
    case 193:
    case 197:
    case 201:
    case 217:
    case 239:
    case 246:
      BehaviorLeafNodes();
      break;
    case 49:
    case 121:
    case 167:
    case 253:
      BindableNodes();
      break;
    case 24:
    case 52:
    case 59:
    case 133:
    case 147:
    case 151:
    case 224:
    case 249:
      GroupingNodes();
      break;
    case 97:
    case 184:
    case 203:
    case 211:
    case 221:
    case 259:
      SceneLeafNodes();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ENTITY % Children  "( %ChildrenNodes; )* " 
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void Children() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
      case 49:
      case 52:
      case 59:
      case 68:
      case 79:
      case 91:
      case 97:
      case 121:
      case 133:
      case 147:
      case 151:
      case 167:
      case 172:
      case 174:
      case 180:
      case 184:
      case 188:
      case 193:
      case 197:
      case 201:
      case 203:
      case 211:
      case 217:
      case 221:
      case 224:
      case 239:
      case 246:
      case 249:
      case 253:
      case 259:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_4;
      }
      ChildrenNodes();
    }
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!--	X3D node is at top of tree.
//  Three definitions are possible without/without/optional Scene tag:
//
//  <!ELEMENT X3D ( Scene ) >
//  <!ELEMENT X3D ( %SceneNodes; ) >
//  <!ELEMENT X3D ( ( %SceneNodes; ) | Scene ) >
//
//  Best:  single optional Header tag (similar to HTML's HEAD) and 
//   Single required Scene tag together:
//
//  <!ELEMENT X3D    ( Header? , Scene ) >
//  <!ELEMENT Header ( #PCDATA ) >
//
// -->
//
// <!ELEMENT X3D    ( Header? , Scene ) >
//
// <!ELEMENT Header ( #PCDATA ) >
// <!ATTLIST Header
//     status CDATA "reserved for future use" >
//
// <!ELEMENT Scene ( %SceneNodes; ) >
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void X3D() throws ParseException {
    jj_consume_token(1);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 3:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_5;
      }
      Scene();
    }
    jj_consume_token(2);
  }

  final public void Header() throws ParseException {
    jj_consume_token(STRING);
  }

  final public void Scene() throws ParseException {
    jj_consume_token(3);
    SceneNodes();
    jj_consume_token(4);
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
//	XML Tag
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public String TagName() throws ParseException {
        Token   t;
    t = jj_consume_token(ID);
                        {if (true) return new String(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public String ElementName() throws ParseException {
        Token   t;
    t = jj_consume_token(ID);
                        {if (true) return new String(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public void XMLElement() throws ParseException {
        String  name;
        String  value;
    name = ElementName();
    jj_consume_token(5);
    value = FieldString();
                        ((XMLNode)getCurrentNode()).addElement(name, value);
  }

  final public void XMLBeginTag() throws ParseException {
        String  tagName;
    jj_consume_token(6);
    tagName = TagName();
                        XMLNode node = new XMLNode();
                        node.setName(tagName);
                        addNode(node);
                        PushNode(node);
  }

  final public void XMLEndTag() throws ParseException {
        String  tagName;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);

      break;
    case 8:
      jj_consume_token(8);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 6:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_6;
        }
        XMLNode();
      }
      jj_consume_token(9);
      tagName = TagName();
      jj_consume_token(8);

      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void XMLNode() throws ParseException {
    XMLBeginTag();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_7;
      }
      XMLElement();
    }
    XMLEndTag();
                        PopNode();
  }

  final public void X3DNode() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 24:
    case 52:
    case 59:
    case 133:
    case 147:
    case 151:
    case 224:
    case 249:
      GroupingNodes();
      break;
    case 49:
    case 121:
    case 167:
    case 253:
      BindableNodes();
      break;
    case 68:
    case 79:
    case 91:
    case 172:
    case 174:
    case 180:
    case 188:
    case 193:
    case 197:
    case 201:
    case 217:
    case 239:
    case 246:
      BehaviorLeafNodes();
      break;
    case 97:
    case 184:
    case 221:
      LightNodes();
      break;
    case 259:
      WorldInfo();
      break;
    case 265:
      Route();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void XML() throws ParseException {
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 6:
      case 24:
      case 49:
      case 52:
      case 59:
      case 68:
      case 79:
      case 91:
      case 97:
      case 121:
      case 133:
      case 147:
      case 151:
      case 167:
      case 172:
      case 174:
      case 180:
      case 184:
      case 188:
      case 193:
      case 197:
      case 201:
      case 217:
      case 221:
      case 224:
      case 239:
      case 246:
      case 249:
      case 253:
      case 259:
      case 265:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 6:
        XMLNode();
        break;
      case 1:
        X3D();
        break;
      case 24:
      case 49:
      case 52:
      case 59:
      case 68:
      case 79:
      case 91:
      case 97:
      case 121:
      case 133:
      case 147:
      case 151:
      case 167:
      case 172:
      case 174:
      case 180:
      case 184:
      case 188:
      case 193:
      case 197:
      case 201:
      case 217:
      case 221:
      case 224:
      case 239:
      case 246:
      case 249:
      case 253:
      case 259:
      case 265:
        X3DNode();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
//	Field String
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public String FieldString() throws ParseException {
        Token   t;
    t = jj_consume_token(STRING);
                        {if (true) return t.image.substring(1, t.image.length()-1);}
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
//	Node Name
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public String NodeName() throws ParseException {
        Token   t;
    t = jj_consume_token(STRING);
                        {if (true) return t.image.substring(1, t.image.length()-1);}
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Anchor %Children; >
// <!ATTLIST Anchor 
//  description CDATA #IMPLIED
//  url         CDATA #IMPLIED
//  parameter   CDATA #IMPLIED
//  bboxCenter  CDATA "(0 0 0)"
//  bboxSize    CDATA "(-1 -1 -1)"
//  DEF ID      #IMPLIED 
//  USE IDREF   #IMPLIED >
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void AnchorElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 19:
      jj_consume_token(19);
      jj_consume_token(5);
      value = FieldString();
                        ((AnchorNode)getCurrentNode()).setURLs(value);
      break;
    case 20:
      jj_consume_token(20);
      jj_consume_token(5);
      value = FieldString();
                        ((AnchorNode)getCurrentNode()).setParameters(value);
      break;
    case 21:
      jj_consume_token(21);
      jj_consume_token(5);
      value = FieldString();
                        ((AnchorNode)getCurrentNode()).setDescription(value);
      break;
    case 22:
      jj_consume_token(22);
      jj_consume_token(5);
      value = FieldString();
                        ((AnchorNode)getCurrentNode()).setBoundingBoxCenter(value);
      break;
    case 23:
      jj_consume_token(23);
      jj_consume_token(5);
      value = FieldString();
                        ((AnchorNode)getCurrentNode()).setBoundingBoxSize(value);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AnchorTag() throws ParseException {
    jj_consume_token(24);
                        AnchorNode anchor = new AnchorNode();
                        addNode(anchor);
                        PushNode(anchor);
  }

  final public void Anchor() throws ParseException {
    AnchorTag();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_9;
      }
      AnchorElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      Children();
      jj_consume_token(25);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Appearance ( %Appearances; ) >
// <!ATTLIST Appearance
//    DEF ID      #IMPLIED
//    USE IDREF   #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void AppearanceElement() throws ParseException {
        String  name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AppearanceTag() throws ParseException {
    jj_consume_token(26);
                        AppearanceNode app = new AppearanceNode();
                        addNode(app);
                        PushNode(app);
  }

  final public void Appearance() throws ParseException {
    AppearanceTag();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_10;
      }
      AppearanceElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      Appearances();
      jj_consume_token(27);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT AudioClip EMPTY >
// <!ATTLIST AudioClip
//    description CDATA #IMPLIED
//    loop      (true|false) "false"
//    pitch       CDATA "1.0"
//    startTime   CDATA "0"
//    stopTime    CDATA "0"
//    url         CDATA #IMPLIED
//    duration    CDATA "0.0"
//    isActive  (true|false) "false"
//    DEF ID      #IMPLIED
//    USE IDREF   #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void AudioClipElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 19:
      jj_consume_token(19);
      jj_consume_token(5);
      value = FieldString();
                        ((AudioClipNode)getCurrentNode()).setURLs(value);
      break;
    case 21:
      jj_consume_token(21);
      jj_consume_token(5);
      value = FieldString();
                        ((AudioClipNode)getCurrentNode()).setDescription(value);
      break;
    case 28:
      jj_consume_token(28);
      jj_consume_token(5);
      value = FieldString();
                        ((AudioClipNode)getCurrentNode()).setLoop(value);
      break;
    case 29:
      jj_consume_token(29);
      jj_consume_token(5);
      value = FieldString();
                        ((AudioClipNode)getCurrentNode()).setPitch(value);
      break;
    case 30:
      jj_consume_token(30);
      jj_consume_token(5);
      value = FieldString();
                        ((AudioClipNode)getCurrentNode()).setStartTime(value);
      break;
    case 31:
      jj_consume_token(31);
      jj_consume_token(5);
      value = FieldString();
                        ((AudioClipNode)getCurrentNode()).setStopTime(value);
      break;
    case 32:
      jj_consume_token(32);
      jj_consume_token(5);
      value = FieldString();
                        ((AudioClipNode)getCurrentNode()).setDuration(value);
      break;
    case 33:
      jj_consume_token(33);
      jj_consume_token(5);
      value = FieldString();
                        ((AudioClipNode)getCurrentNode()).setIsActive(value);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AudioClipTag() throws ParseException {
    jj_consume_token(34);
                        AudioClipNode aclip = new AudioClipNode();
                        addNode(aclip);
                        PushNode(aclip);
  }

  final public void AudioClip() throws ParseException {
    AudioClipTag();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 19:
      case 21:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_11;
      }
      AudioClipElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(35);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Background EMPTY>
// <!ATTLIST Background
//     groundAngle CDATA #IMPLIED
//     groundColor CDATA "(0 0 0)"
//     backUrl     CDATA #IMPLIED
//     bottomUrl   CDATA #IMPLIED
//     frontUrl    CDATA #IMPLIED
//     leftUrl     CDATA #IMPLIED
//     rightUrl    CDATA #IMPLIED
//     topUrl      CDATA #IMPLIED
//     skyAngle    CDATA #IMPLIED
//     skyColor    CDATA "(0 0 0)"
//     bind        (true|false) "false"
//     bindTime    CDATA "-1"
//     isBound     (true|false) "false"
//     DEF ID      #IMPLIED 
//     USE IDREF   #IMPLIED >
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void BackgroundElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 36:
      jj_consume_token(36);
      jj_consume_token(5);
      value = FieldString();
                        ((BackgroundNode)getCurrentNode()).setBackURLs(value);
      break;
    case 37:
      jj_consume_token(37);
      jj_consume_token(5);
      value = FieldString();
                        ((BackgroundNode)getCurrentNode()).setBottomURLs(value);
      break;
    case 38:
      jj_consume_token(38);
      jj_consume_token(5);
      value = FieldString();
                        ((BackgroundNode)getCurrentNode()).setFrontURLs(value);
      break;
    case 39:
      jj_consume_token(39);
      jj_consume_token(5);
      value = FieldString();
                        ((BackgroundNode)getCurrentNode()).setLeftURLs(value);
      break;
    case 40:
      jj_consume_token(40);
      jj_consume_token(5);
      value = FieldString();
                        ((BackgroundNode)getCurrentNode()).setRightURLs(value);
      break;
    case 41:
      jj_consume_token(41);
      jj_consume_token(5);
      value = FieldString();
                        ((BackgroundNode)getCurrentNode()).setTopURLs(value);
      break;
    case 42:
      jj_consume_token(42);
      jj_consume_token(5);
      value = FieldString();
                        ((BackgroundNode)getCurrentNode()).setGroundAngles(value);
      break;
    case 43:
      jj_consume_token(43);
      jj_consume_token(5);
      value = FieldString();
                        ((BackgroundNode)getCurrentNode()).setSkyAngles(value);
      break;
    case 44:
      jj_consume_token(44);
      jj_consume_token(5);
      value = FieldString();
                        ((BackgroundNode)getCurrentNode()).setGroundColors(value);
      break;
    case 45:
      jj_consume_token(45);
      jj_consume_token(5);
      value = FieldString();
                        ((BackgroundNode)getCurrentNode()).setSkyColors(value);
      break;
    case 46:
      jj_consume_token(46);
      jj_consume_token(5);
      value = FieldString();
                        ((BackgroundNode)getCurrentNode()).setBind(value);
      break;
    case 47:
      jj_consume_token(47);
      jj_consume_token(5);
      value = FieldString();
                        ((BackgroundNode)getCurrentNode()).setBindTime(value);
      break;
    case 48:
      jj_consume_token(48);
      jj_consume_token(5);
      value = FieldString();
                        ((BackgroundNode)getCurrentNode()).setIsBound(value);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BackgroundTag() throws ParseException {
    jj_consume_token(49);
                        BackgroundNode bg = new BackgroundNode();
                        addNode(bg);
                        PushNode(bg);
  }

  final public void Background() throws ParseException {
    BackgroundTag();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_12;
      }
      BackgroundElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(50);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Billboard %Children; >
// <!ATTLIST Billboard
//     axisOfRotation CDATA "(0 1 0)"
//     bboxCenter     CDATA "(0 0 0)"
//     bboxSize       CDATA "(-1 -1 -1)"
//     DEF ID      #IMPLIED 
//     USE IDREF   #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void BillboardElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 51:
      jj_consume_token(51);
      jj_consume_token(5);
      value = FieldString();
                        ((BillboardNode)getCurrentNode()).setAxisOfRotation(value);
      break;
    case 22:
      jj_consume_token(22);
      jj_consume_token(5);
      value = FieldString();
                        ((BillboardNode)getCurrentNode()).setBoundingBoxCenter(value);
      break;
    case 23:
      jj_consume_token(23);
      jj_consume_token(5);
      value = FieldString();
                        ((BillboardNode)getCurrentNode()).setBoundingBoxSize(value);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BillboardTag() throws ParseException {
    jj_consume_token(52);
                        BillboardNode billboard = new BillboardNode();
                        addNode(billboard);
                        PushNode(billboard);
  }

  final public void Billboard() throws ParseException {
    BillboardTag();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 22:
      case 23:
      case 51:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_13;
      }
      BillboardElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      Children();
      jj_consume_token(53);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Box EMPTY>
// <!ATTLIST Box
//     size CDATA "(2 2 2)"
//     DEF ID      #IMPLIED 
//     USE IDREF   #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void BoxElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 54:
      jj_consume_token(54);
      jj_consume_token(5);
      value = FieldString();
                        ((BoxNode)getCurrentNode()).setSize(value);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BoxTag() throws ParseException {
    jj_consume_token(55);
                        BoxNode box = new BoxNode();
                        addNode(box);
                        PushNode(box);
  }

  final public void Box() throws ParseException {
    BoxTag();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 54:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_14;
      }
      BoxElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(56);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!-- not following the proposal to move Collision to Sensor ... -->
// <!ELEMENT Collision ( ( %ChildrenNodes; )*, Proxy?, ( %ChildrenNodes; )* )  >
// <!ATTLIST Collision
//     collide (true|false) "true"
//     bboxCenter  CDATA "(0 0 0)"
//     bboxSize    CDATA "(-1 -1 -1)"
//     collideTime CDATA "0.0"
//     DEF ID      #IMPLIED 
//     USE IDREF   #IMPLIED >
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void CollisionElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 57:
      jj_consume_token(57);
      jj_consume_token(5);
      value = FieldString();
                        ((CollisionNode)getCurrentNode()).setCollideTime(value);
      break;
    case 58:
      jj_consume_token(58);
      jj_consume_token(5);
      value = FieldString();
                        ((CollisionNode)getCurrentNode()).setCollide(value);
      break;
    case 22:
      jj_consume_token(22);
      jj_consume_token(5);
      value = FieldString();
                        ((CollisionNode)getCurrentNode()).setBoundingBoxCenter(value);
      break;
    case 23:
      jj_consume_token(23);
      jj_consume_token(5);
      value = FieldString();
                        ((CollisionNode)getCurrentNode()).setBoundingBoxSize(value);
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CollisionTag() throws ParseException {
    jj_consume_token(59);
                        CollisionNode collision = new CollisionNode();
                        addNode(collision);
                        PushNode(collision);
  }

  final public void CollisionChildren() throws ParseException {
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
      case 49:
      case 52:
      case 59:
      case 68:
      case 79:
      case 91:
      case 97:
      case 121:
      case 133:
      case 147:
      case 151:
      case 167:
      case 172:
      case 174:
      case 180:
      case 184:
      case 188:
      case 193:
      case 195:
      case 197:
      case 201:
      case 203:
      case 211:
      case 217:
      case 221:
      case 224:
      case 239:
      case 246:
      case 249:
      case 253:
      case 259:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
      case 49:
      case 52:
      case 59:
      case 68:
      case 79:
      case 91:
      case 97:
      case 121:
      case 133:
      case 147:
      case 151:
      case 167:
      case 172:
      case 174:
      case 180:
      case 184:
      case 188:
      case 193:
      case 197:
      case 201:
      case 203:
      case 211:
      case 217:
      case 221:
      case 224:
      case 239:
      case 246:
      case 249:
      case 253:
      case 259:
        ChildrenNodes();
        break;
      case 195:
        Proxy();
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Collision() throws ParseException {
    CollisionTag();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 22:
      case 23:
      case 57:
      case 58:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_16;
      }
      CollisionElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      CollisionChildren();
      jj_consume_token(60);
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Color EMPTY >
// <!ATTLIST Color
//     color CDATA #REQUIRED
//     DEF ID      #IMPLIED
//     USE IDREF   #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void ColorElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 61:
      jj_consume_token(61);
      jj_consume_token(5);
      value = FieldString();
                        ((ColorNode)getCurrentNode()).setColors(value);
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ColorTag() throws ParseException {
    jj_consume_token(62);
                        ColorNode color = new ColorNode();
                        addNode(color);
                        PushNode(color);
  }

  final public void Color() throws ParseException {
    ColorTag();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 61:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_17;
      }
      ColorElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(63);
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT ColorInterpolator EMPTY>
// <!ATTLIST ColorInterpolator
//     key      CDATA #IMPLIED
//     keyValue CDATA #IMPLIED
//     fraction CDATA "0"
//     value    CDATA "(0 0 0)" 
//     DEF ID      #IMPLIED
//     USE IDREF   #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void ColorInterpolatorElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 64:
      jj_consume_token(64);
      jj_consume_token(5);
      value = FieldString();
                        ((ColorInterpolatorNode)getCurrentNode()).setKeys(value);
      break;
    case 65:
      jj_consume_token(65);
      jj_consume_token(5);
      value = FieldString();
                        ((ColorInterpolatorNode)getCurrentNode()).setKeyValues(value);
      break;
    case 66:
      jj_consume_token(66);
      jj_consume_token(5);
      value = FieldString();
                        ((ColorInterpolatorNode)getCurrentNode()).setFraction(value);
      break;
    case 67:
      jj_consume_token(67);
      jj_consume_token(5);
      value = FieldString();
                        ((ColorInterpolatorNode)getCurrentNode()).setValue(value);
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ColorInterpolatorTag() throws ParseException {
    jj_consume_token(68);
                        ColorInterpolatorNode colorInterp = new ColorInterpolatorNode();
                        addNode(colorInterp);
                        PushNode(colorInterp);
  }

  final public void ColorInterpolator() throws ParseException {
    ColorInterpolatorTag();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 64:
      case 65:
      case 66:
      case 67:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_18;
      }
      ColorInterpolatorElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(69);
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Cone EMPTY>
// <!ATTLIST Cone
//     bottomRadius CDATA "1"
//     height       CDATA "2"
//     side   (true|false) "true"
//     bottom (true|false) "true"
//     DEF ID      #IMPLIED
//     USE IDREF   #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void ConeElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 70:
      jj_consume_token(70);
      jj_consume_token(5);
      value = FieldString();
                        ((ConeNode)getCurrentNode()).setSide(value);
      break;
    case 71:
      jj_consume_token(71);
      jj_consume_token(5);
      value = FieldString();
                        ((ConeNode)getCurrentNode()).setBottom(value);
      break;
    case 72:
      jj_consume_token(72);
      jj_consume_token(5);
      value = FieldString();
                        ((ConeNode)getCurrentNode()).setHeight(value);
      break;
    case 73:
      jj_consume_token(73);
      jj_consume_token(5);
      value = FieldString();
                        ((ConeNode)getCurrentNode()).setBottomRadius(value);
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ConeTag() throws ParseException {
    jj_consume_token(74);
                        ConeNode cone = new ConeNode();
                        addNode(cone);
                        PushNode(cone);
  }

  final public void Cone() throws ParseException {
    ConeTag();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 70:
      case 71:
      case 72:
      case 73:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_19;
      }
      ConeElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(75);
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Coordinate EMPTY >
// <!ATTLIST Coordinate 
//     point CDATA #REQUIRED
//     DEF ID      #IMPLIED
//     USE IDREF   #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void CoordinateElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 76:
      jj_consume_token(76);
      jj_consume_token(5);
      value = FieldString();
                        ((CoordinateNode)getCurrentNode()).setPoints(value);
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CoordinateTag() throws ParseException {
    jj_consume_token(77);
                        CoordinateNode coord = new CoordinateNode();
                        addNode(coord);
                        PushNode(coord);
  }

  final public void Coordinate() throws ParseException {
    CoordinateTag();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 76:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_20;
      }
      CoordinateElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(78);
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT CoordinateInterpolator EMPTY>
// <!ATTLIST CoordinateInterpolator
//     key      CDATA #IMPLIED
//     keyValue CDATA #IMPLIED
//     fraction CDATA "0"
//     value    CDATA "(0 0 0)"
//     DEF ID      #IMPLIED
//     USE IDREF   #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void CoordinateInterpolatorElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 64:
      jj_consume_token(64);
      jj_consume_token(5);
      value = FieldString();
                        ((CoordinateInterpolatorNode)getCurrentNode()).setKeys(value);
      break;
    case 65:
      jj_consume_token(65);
      jj_consume_token(5);
      value = FieldString();
                        ((CoordinateInterpolatorNode)getCurrentNode()).setKeyValues(value);
      break;
    case 66:
      jj_consume_token(66);
      jj_consume_token(5);
      value = FieldString();
                        ((CoordinateInterpolatorNode)getCurrentNode()).setFraction(value);
      break;
    case 67:
      jj_consume_token(67);
      jj_consume_token(5);
      value = FieldString();
                        ((CoordinateInterpolatorNode)getCurrentNode()).setValue(value);
      break;
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CoordinateInterpolatorTag() throws ParseException {
    jj_consume_token(79);
                        CoordinateInterpolatorNode coordInterp = new CoordinateInterpolatorNode();
                        addNode(coordInterp);
                        PushNode(coordInterp);
  }

  final public void CoordinateInterpolator() throws ParseException {
    CoordinateInterpolatorTag();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 64:
      case 65:
      case 66:
      case 67:
        ;
        break;
      default:
        jj_la1[58] = jj_gen;
        break label_21;
      }
      CoordinateInterpolatorElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(80);
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Cylinder EMPTY>
// <!ATTLIST Cylinder 
//     bottom (true|false) "true"
//     height CDATA "2"
//     radius CDATA "1"
//     side   (true|false) "true"
//     top    (true|false) "true"
//     DEF ID      #IMPLIED
//     USE IDREF   #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void CylinderElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 70:
      jj_consume_token(70);
      jj_consume_token(5);
      value = FieldString();
                        ((CylinderNode)getCurrentNode()).setSide(value);
      break;
    case 71:
      jj_consume_token(71);
      jj_consume_token(5);
      value = FieldString();
                        ((CylinderNode)getCurrentNode()).setBottom(value);
      break;
    case 81:
      jj_consume_token(81);
      jj_consume_token(5);
      value = FieldString();
                        ((CylinderNode)getCurrentNode()).setTop(value);
      break;
    case 72:
      jj_consume_token(72);
      jj_consume_token(5);
      value = FieldString();
                        ((CylinderNode)getCurrentNode()).setHeight(value);
      break;
    case 82:
      jj_consume_token(82);
      jj_consume_token(5);
      value = FieldString();
                        ((CylinderNode)getCurrentNode()).setRadius(value);
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CylinderTag() throws ParseException {
    jj_consume_token(83);
                        CylinderNode cylinder = new CylinderNode();
                        addNode(cylinder);
                        PushNode(cylinder);
  }

  final public void Cylinder() throws ParseException {
    CylinderTag();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 70:
      case 71:
      case 72:
      case 81:
      case 82:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_22;
      }
      CylinderElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(84);
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT CylinderSensor EMPTY>
// <!ATTLIST CylinderSensor
//     autoOffset (true|false) "true"
//     diskAngle  CDATA "0.262"
//     enabled    (true|false) "true"
//     maxAngle   CDATA "-1"
//     minAngle   CDATA "0"
//     offset     CDATA "0"
//     isActive   (true|false) "false"    
//     rotation   CDATA "(0 0 1 0)"
//     trackPoint CDATA "(0 0 0)"
//     DEF ID      #IMPLIED
//     USE IDREF   #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void CylinderSensorElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 85:
      jj_consume_token(85);
      jj_consume_token(5);
      value = FieldString();
                        ((CylinderSensorNode)getCurrentNode()).setMinAngle(value);
      break;
    case 86:
      jj_consume_token(86);
      jj_consume_token(5);
      value = FieldString();
                        ((CylinderSensorNode)getCurrentNode()).setMaxAngle(value);
      break;
    case 87:
      jj_consume_token(87);
      jj_consume_token(5);
      value = FieldString();
                        ((CylinderSensorNode)getCurrentNode()).setDiskAngle(value);
      break;
    case 88:
      jj_consume_token(88);
      jj_consume_token(5);
      value = FieldString();
                        ((CylinderSensorNode)getCurrentNode()).setOffset(value);
      break;
    case 89:
      jj_consume_token(89);
      jj_consume_token(5);
      value = FieldString();
                        ((CylinderSensorNode)getCurrentNode()).setEnabled(value);
      break;
    case 90:
      jj_consume_token(90);
      jj_consume_token(5);
      value = FieldString();
                        ((CylinderSensorNode)getCurrentNode()).setAutoOffset(value);
      break;
    case 33:
      jj_consume_token(33);
      jj_consume_token(5);
      value = FieldString();
                        ((CylinderSensorNode)getCurrentNode()).setIsActive(value);
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CylinderSensorTag() throws ParseException {
    jj_consume_token(91);
                        CylinderSensorNode sensor = new CylinderSensorNode();
                        addNode(sensor);
                        PushNode(sensor);
  }

  final public void CylinderSensor() throws ParseException {
    CylinderSensorTag();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 33:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
        ;
        break;
      default:
        jj_la1[64] = jj_gen;
        break label_23;
      }
      CylinderSensorElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(92);
      break;
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT DirectionalLight EMPTY>
// <!ATTLIST DirectionalLight
//     ambientIntensity CDATA "0"
//     color            CDATA "(1 1 1)"
//     direction        CDATA "(0 0 -1)"
//     intensity        CDATA "1"
//     on               (true|false) "true"
//     DEF ID      #IMPLIED
//     USE IDREF   #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void DirectionalLightElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 93:
      jj_consume_token(93);
      jj_consume_token(5);
      value = FieldString();
                        ((DirectionalLightNode)getCurrentNode()).setOn(value);
      break;
    case 94:
      jj_consume_token(94);
      jj_consume_token(5);
      value = FieldString();
                        ((DirectionalLightNode)getCurrentNode()).setIntensity(value);
      break;
    case 95:
      jj_consume_token(95);
      jj_consume_token(5);
      value = FieldString();
                        ((DirectionalLightNode)getCurrentNode()).setAmbientIntensity(value);
      break;
    case 61:
      jj_consume_token(61);
      jj_consume_token(5);
      value = FieldString();
                        ((DirectionalLightNode)getCurrentNode()).setColor(value);
      break;
    case 96:
      jj_consume_token(96);
      jj_consume_token(5);
      value = FieldString();
                        ((DirectionalLightNode)getCurrentNode()).setDirection(value);
      break;
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DirectionalLightTag() throws ParseException {
    jj_consume_token(97);
                        DirectionalLightNode light = new DirectionalLightNode();
                        addNode(light);
                        PushNode(light);
  }

  final public void DirectionalLight() throws ParseException {
    DirectionalLightTag();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 61:
      case 93:
      case 94:
      case 95:
      case 96:
        ;
        break;
      default:
        jj_la1[67] = jj_gen;
        break label_24;
      }
      DirectionalLightElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(98);
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT ElevationGrid ( (Color?), (Normal?), (TextureCoordinate?)) >
// <!ATTLIST ElevationGrid
//     height          CDATA #IMPLIED
//     ccw             (true|false) "true"
//     colorPerVertex  (true|false) "true"
//     creaseAngle     CDATA "0"
//     normalPerVertex (true|false) "true"
//     solid           (true|false) "true"
//     xDimension      CDATA "0"
//     xSpacing        CDATA "1.0"
//     zDimension      CDATA "0"
//     zSpacing        CDATA "1.0"
//     DEF ID      #IMPLIED
//     USE IDREF   #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void ElevationGridElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 72:
      jj_consume_token(72);
      jj_consume_token(5);
      value = FieldString();
                        ((ElevationGridNode)getCurrentNode()).setHeights(value);
      break;
    case 99:
      jj_consume_token(99);
      jj_consume_token(5);
      value = FieldString();
                        ((ElevationGridNode)getCurrentNode()).setCCW(value);
      break;
    case 100:
      jj_consume_token(100);
      jj_consume_token(5);
      value = FieldString();
                        ((ElevationGridNode)getCurrentNode()).setColorPerVertex(value);
      break;
    case 101:
      jj_consume_token(101);
      jj_consume_token(5);
      value = FieldString();
                        ((ElevationGridNode)getCurrentNode()).setCreaseAngle(value);
      break;
    case 102:
      jj_consume_token(102);
      jj_consume_token(5);
      value = FieldString();
                        ((ElevationGridNode)getCurrentNode()).setSolid(value);
      break;
    case 103:
      jj_consume_token(103);
      jj_consume_token(5);
      value = FieldString();
                        ((ElevationGridNode)getCurrentNode()).setNormalPerVertex(value);
      break;
    case 104:
      jj_consume_token(104);
      jj_consume_token(5);
      value = FieldString();
                        ((ElevationGridNode)getCurrentNode()).setXDimension(value);
      break;
    case 105:
      jj_consume_token(105);
      jj_consume_token(5);
      value = FieldString();
                        ((ElevationGridNode)getCurrentNode()).setXSpacing(value);
      break;
    case 106:
      jj_consume_token(106);
      jj_consume_token(5);
      value = FieldString();
                        ((ElevationGridNode)getCurrentNode()).setZDimension(value);
      break;
    case 107:
      jj_consume_token(107);
      jj_consume_token(5);
      value = FieldString();
                        ((ElevationGridNode)getCurrentNode()).setZSpacing(value);
      break;
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ElevationGridTag() throws ParseException {
    jj_consume_token(108);
                        ElevationGridNode egrid = new ElevationGridNode();
                        addNode(egrid);
                        PushNode(egrid);
  }

  final public void ElevationGrid() throws ParseException {
    ElevationGridTag();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 72:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
        ;
        break;
      default:
        jj_la1[70] = jj_gen;
        break label_25;
      }
      ElevationGridElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
    case 62:
    case 170:
    case 231:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 62:
        Color();
        break;
      default:
        jj_la1[71] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 170:
        Normal();
        break;
      default:
        jj_la1[72] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 231:
        TextureCoordinate();
        break;
      default:
        jj_la1[73] = jj_gen;
        ;
      }
      jj_consume_token(8);
      jj_consume_token(109);
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Extrusion EMPTY >
// <!ATTLIST Extrusion
//     beginCap     (true|false) "true"
//     ccw          (true|false) "true"
//     convex       (true|false) "true"
//     creaseAngle  CDATA "0.0"
//     crossSection CDATA "[ 1 1, 1 -1, -1 -1, -1 1, 1 1 ]"
//     endCap       (true|false) "true"
//     orientation  CDATA "[0 0 1 0]"
//     scale        CDATA "[1 1]"
//     solid        (true|false) "true"
//     spine        CDATA "[ 0 0 0, 0 1 0 ]"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void ExtrusionElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 110:
      jj_consume_token(110);
      jj_consume_token(5);
      value = FieldString();
                        ((ExtrusionNode)getCurrentNode()).setCrossSections(value);
      break;
    case 111:
      jj_consume_token(111);
      jj_consume_token(5);
      value = FieldString();
                        ((ExtrusionNode)getCurrentNode()).setOrientations(value);
      break;
    case 112:
      jj_consume_token(112);
      jj_consume_token(5);
      value = FieldString();
                        ((ExtrusionNode)getCurrentNode()).setScales(value);
      break;
    case 113:
      jj_consume_token(113);
      jj_consume_token(5);
      value = FieldString();
                        ((ExtrusionNode)getCurrentNode()).setSpines(value);
      break;
    case 99:
      jj_consume_token(99);
      jj_consume_token(5);
      value = FieldString();
                        ((ExtrusionNode)getCurrentNode()).setCCW(value);
      break;
    case 114:
      jj_consume_token(114);
      jj_consume_token(5);
      value = FieldString();
                        ((ExtrusionNode)getCurrentNode()).setConvex(value);
      break;
    case 115:
      jj_consume_token(115);
      jj_consume_token(5);
      value = FieldString();
                        ((ExtrusionNode)getCurrentNode()).setBeginCap(value);
      break;
    case 116:
      jj_consume_token(116);
      jj_consume_token(5);
      value = FieldString();
                        ((ExtrusionNode)getCurrentNode()).setEndCap(value);
      break;
    case 101:
      jj_consume_token(101);
      jj_consume_token(5);
      value = FieldString();
                        ((ExtrusionNode)getCurrentNode()).setCreaseAngle(value);
      break;
    case 102:
      jj_consume_token(102);
      jj_consume_token(5);
      value = FieldString();
                        ((ExtrusionNode)getCurrentNode()).setSolid(value);
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ExtrusionTag() throws ParseException {
    jj_consume_token(117);
                        ExtrusionNode extrusion = new ExtrusionNode();
                        addNode(extrusion);
                        PushNode(extrusion);
  }

  final public void Extrusion() throws ParseException {
    ExtrusionTag();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 99:
      case 101:
      case 102:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
        ;
        break;
      default:
        jj_la1[76] = jj_gen;
        break label_26;
      }
      ExtrusionElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(118);
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Fog EMPTY >
// <!ATTLIST Fog
//     color           CDATA "(1 1 1)"
//     fogType         (LINEAR|EXPONENTIAL) "LINEAR"
//     visibilityRange CDATA "0"
//     bind            (true|false) "false"
//     bindTime        CDATA "-1"
//     isBound         (true|false) "false"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void FogElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 61:
      jj_consume_token(61);
      jj_consume_token(5);
      value = FieldString();
                        ((FogNode)getCurrentNode()).setColor(value);
      break;
    case 119:
      jj_consume_token(119);
      jj_consume_token(5);
      value = FieldString();
                        ((FogNode)getCurrentNode()).setFogType(value);
      break;
    case 120:
      jj_consume_token(120);
      jj_consume_token(5);
      value = FieldString();
                        ((FogNode)getCurrentNode()).setVisibilityRange(value);
      break;
    case 46:
      jj_consume_token(46);
      jj_consume_token(5);
      value = FieldString();
                        ((FogNode)getCurrentNode()).setBind(value);
      break;
    case 47:
      jj_consume_token(47);
      jj_consume_token(5);
      value = FieldString();
                        ((FogNode)getCurrentNode()).setBindTime(value);
      break;
    case 48:
      jj_consume_token(48);
      jj_consume_token(5);
      value = FieldString();
                        ((FogNode)getCurrentNode()).setIsBound(value);
      break;
    default:
      jj_la1[78] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void FogTag() throws ParseException {
    jj_consume_token(121);
                        FogNode fog = new FogNode();
                        addNode(fog);
                        PushNode(fog);
  }

  final public void Fog() throws ParseException {
    FogTag();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 46:
      case 47:
      case 48:
      case 61:
      case 119:
      case 120:
        ;
        break;
      default:
        jj_la1[79] = jj_gen;
        break label_27;
      }
      FogElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(122);
      break;
    default:
      jj_la1[80] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT FontStyle EMPTY >
// <!ATTLIST FontStyle
//     family      CDATA "[SERIF]"
//     horizontal  (true|false) "true"
//     justify     CDATA "[BEGIN]"
//     language    CDATA #IMPLIED
//     leftToRight (true|false) "true"
//     size CDATA  "1.0"
//     spacing     CDATA "1.0"
//     style       (PLAIN|BOLD|ITALIC) "BOLD"
//     topToBottom (true|false) "true"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void FontStyleElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 123:
      jj_consume_token(123);
      jj_consume_token(5);
      value = FieldString();
                        ((FontStyleNode)getCurrentNode()).setFamilies(value);
      break;
    case 124:
      jj_consume_token(124);
      jj_consume_token(5);
      value = FieldString();
                        ((FontStyleNode)getCurrentNode()).setJustifies(value);
      break;
    case 125:
      jj_consume_token(125);
      jj_consume_token(5);
      value = FieldString();
                        ((FontStyleNode)getCurrentNode()).setLanguage(value);
      break;
    case 126:
      jj_consume_token(126);
      jj_consume_token(5);
      value = FieldString();
                        ((FontStyleNode)getCurrentNode()).setStyle(value);
      break;
    case 127:
      jj_consume_token(127);
      jj_consume_token(5);
      value = FieldString();
                        ((FontStyleNode)getCurrentNode()).setHorizontal(value);
      break;
    case 128:
      jj_consume_token(128);
      jj_consume_token(5);
      value = FieldString();
                        ((FontStyleNode)getCurrentNode()).setLeftToRight(value);
      break;
    case 129:
      jj_consume_token(129);
      jj_consume_token(5);
      value = FieldString();
                        ((FontStyleNode)getCurrentNode()).setTopToBottom(value);
      break;
    case 54:
      jj_consume_token(54);
      jj_consume_token(5);
      value = FieldString();
                        ((FontStyleNode)getCurrentNode()).setSize(value);
      break;
    case 130:
      jj_consume_token(130);
      jj_consume_token(5);
      value = FieldString();
                        ((FontStyleNode)getCurrentNode()).setSpacing(value);
      break;
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void FontStyleTag() throws ParseException {
    jj_consume_token(131);
                        FontStyleNode fontStyle = new FontStyleNode();
                        addNode(fontStyle);
                        PushNode(fontStyle);
  }

  final public void FontStyle() throws ParseException {
    FontStyleTag();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 54:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
        ;
        break;
      default:
        jj_la1[82] = jj_gen;
        break label_28;
      }
      FontStyleElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(132);
      break;
    default:
      jj_la1[83] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Group %Children; >
// <!ATTLIST Group
//     bboxCenter CDATA "(0 0 0)"
//     bboxSize   CDATA "(-1 -1 -1)"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void GroupElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 22:
      jj_consume_token(22);
      jj_consume_token(5);
      value = FieldString();
                        ((GroupNode)getCurrentNode()).setBoundingBoxCenter(value);
      break;
    case 23:
      jj_consume_token(23);
      jj_consume_token(5);
      value = FieldString();
                        ((GroupNode)getCurrentNode()).setBoundingBoxSize(value);
      break;
    default:
      jj_la1[84] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void GroupTag() throws ParseException {
    jj_consume_token(133);
                        GroupNode group = new GroupNode();
                        addNode(group);
                        PushNode(group);
  }

  final public void Group() throws ParseException {
    GroupTag();
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 22:
      case 23:
        ;
        break;
      default:
        jj_la1[85] = jj_gen;
        break label_29;
      }
      GroupElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      Children();
      jj_consume_token(134);
      break;
    default:
      jj_la1[86] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT ImageTexture EMPTY >
// <!ATTLIST ImageTexture 
//     url     CDATA #IMPLIED
//     repeatS (true|false) "true"
//     repeatT (true|false) "true"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void ImageTextureElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 19:
      jj_consume_token(19);
      jj_consume_token(5);
      value = FieldString();
                        ((ImageTextureNode)getCurrentNode()).setURLs(value);
      break;
    case 135:
      jj_consume_token(135);
      jj_consume_token(5);
      value = FieldString();
                        ((ImageTextureNode)getCurrentNode()).setRepeatS(value);
      break;
    case 136:
      jj_consume_token(136);
      jj_consume_token(5);
      value = FieldString();
                        ((ImageTextureNode)getCurrentNode()).setRepeatT(value);
      break;
    default:
      jj_la1[87] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ImageTextureTag() throws ParseException {
    jj_consume_token(137);
                        ImageTextureNode texture = new ImageTextureNode();
                        addNode(texture);
                        PushNode(texture);
  }

  final public void ImageTexture() throws ParseException {
    ImageTextureTag();
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 19:
      case 135:
      case 136:
        ;
        break;
      default:
        jj_la1[88] = jj_gen;
        break label_30;
      }
      ImageTextureElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(138);
      break;
    default:
      jj_la1[89] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT IndexedFaceSet ( ( Color?, Coordinate?, Normal?, TextureCoordinate? ) |
//                            ( Coordinate?, Color?, Normal?, TextureCoordinate? ) ) >
// <!ATTLIST IndexedFaceSet
//     ccw             (true|false) "true"
//     colorIndex      CDATA #IMPLIED
//     colorPerVertex  (true|false) "true"
//     convex          (true|false) "true" 
//     coordIndex      CDATA #IMPLIED
//     creaseAngle     CDATA "0"
//     normalIndex     CDATA #IMPLIED
//     normalPerVertex (true|false) "true"
//     solid           (true|false) "true"
//     texCoordIndex   CDATA #IMPLIED
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void IdxFaceSetElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 139:
      jj_consume_token(139);
      jj_consume_token(5);
      value = FieldString();
                ((IndexedFaceSetNode)getCurrentNode()).setCoordIndices(value);
      break;
    case 140:
      jj_consume_token(140);
      jj_consume_token(5);
      value = FieldString();
                ((IndexedFaceSetNode)getCurrentNode()).setColorIndices(value);
      break;
    case 141:
      jj_consume_token(141);
      jj_consume_token(5);
      value = FieldString();
                ((IndexedFaceSetNode)getCurrentNode()).setNormalIndices(value);
      break;
    case 142:
      jj_consume_token(142);
      jj_consume_token(5);
      value = FieldString();
                ((IndexedFaceSetNode)getCurrentNode()).setTexCoordIndices(value);
      break;
    case 101:
      jj_consume_token(101);
      jj_consume_token(5);
      value = FieldString();
                ((IndexedFaceSetNode)getCurrentNode()).setCreaseAngle(value);
      break;
    case 99:
      jj_consume_token(99);
      jj_consume_token(5);
      value = FieldString();
                ((IndexedFaceSetNode)getCurrentNode()).setCCW(value);
      break;
    case 102:
      jj_consume_token(102);
      jj_consume_token(5);
      value = FieldString();
                ((IndexedFaceSetNode)getCurrentNode()).setSolid(value);
      break;
    case 114:
      jj_consume_token(114);
      jj_consume_token(5);
      value = FieldString();
                ((IndexedFaceSetNode)getCurrentNode()).setConvex(value);
      break;
    case 100:
      jj_consume_token(100);
      jj_consume_token(5);
      value = FieldString();
                ((IndexedFaceSetNode)getCurrentNode()).setColorPerVertex(value);
      break;
    case 103:
      jj_consume_token(103);
      jj_consume_token(5);
      value = FieldString();
                ((IndexedFaceSetNode)getCurrentNode()).setNormalPerVertex(value);
      break;
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IdxFaceSetTag() throws ParseException {
    jj_consume_token(143);
                        IndexedFaceSetNode idxFaceset = new IndexedFaceSetNode();
                        addNode(idxFaceset);
                        PushNode(idxFaceset);
  }

  final public void IndexedFaceSetChildren() throws ParseException {
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 62:
      case 77:
      case 170:
      case 231:
        ;
        break;
      default:
        jj_la1[91] = jj_gen;
        break label_31;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 62:
        Color();
        break;
      case 77:
        Coordinate();
        break;
      case 170:
        Normal();
        break;
      case 231:
        TextureCoordinate();
        break;
      default:
        jj_la1[92] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void IndexedFaceSet() throws ParseException {
    IdxFaceSetTag();
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 114:
      case 139:
      case 140:
      case 141:
      case 142:
        ;
        break;
      default:
        jj_la1[93] = jj_gen;
        break label_32;
      }
      IdxFaceSetElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      IndexedFaceSetChildren();
      jj_consume_token(144);
      break;
    default:
      jj_la1[94] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT IndexedLineSet ( ( Color?, Coordinate? ) |
//                            ( Coordinate?, Color? ) ) >
// <!ATTLIST IndexedLineSet
//     colorIndex      CDATA #IMPLIED
//     colorPerVertex  (true|false) "true"
//     coordIndex      CDATA #IMPLIED
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void IdxLineSetElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 139:
      jj_consume_token(139);
      jj_consume_token(5);
      value = FieldString();
                ((IndexedLineSetNode)getCurrentNode()).setCoordIndices(value);
      break;
    case 140:
      jj_consume_token(140);
      jj_consume_token(5);
      value = FieldString();
                ((IndexedLineSetNode)getCurrentNode()).setColorIndices(value);
      break;
    case 100:
      jj_consume_token(100);
      jj_consume_token(5);
      value = FieldString();
                ((IndexedLineSetNode)getCurrentNode()).setColorPerVertex(value);
      break;
    default:
      jj_la1[95] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IdxLineSetTag() throws ParseException {
    jj_consume_token(145);
                        IndexedLineSetNode idxLineSet = new IndexedLineSetNode();
                        addNode(idxLineSet);
                        PushNode(idxLineSet);
  }

  final public void IndexedLineSetChildren() throws ParseException {
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 62:
      case 77:
        ;
        break;
      default:
        jj_la1[96] = jj_gen;
        break label_33;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 77:
        Coordinate();
        break;
      case 62:
        Color();
        break;
      default:
        jj_la1[97] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void IndexedLineSet() throws ParseException {
    IdxLineSetTag();
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 100:
      case 139:
      case 140:
        ;
        break;
      default:
        jj_la1[98] = jj_gen;
        break label_34;
      }
      IdxLineSetElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      IndexedLineSetChildren();
      jj_consume_token(146);
      break;
    default:
      jj_la1[99] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Inline ( %SceneNodes; ) >
// <!ATTLIST Inline 
//     url         CDATA #REQUIRED
//     bboxCenter  CDATA "(0 0 0)"
//     bboxSize    CDATA "(-1 -1 -1)"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void InlineElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 19:
      jj_consume_token(19);
      jj_consume_token(5);
      value = FieldString();
                        ((InlineNode)getCurrentNode()).setURLs(value);
      break;
    case 22:
      jj_consume_token(22);
      jj_consume_token(5);
      value = FieldString();
                        ((InlineNode)getCurrentNode()).setBoundingBoxCenter(value);
      break;
    case 23:
      jj_consume_token(23);
      jj_consume_token(5);
      value = FieldString();
                        ((InlineNode)getCurrentNode()).setBoundingBoxSize(value);
      break;
    default:
      jj_la1[100] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void InlineTag() throws ParseException {
    jj_consume_token(147);
                        InlineNode inline = new InlineNode();
                        addNode(inline);
                        PushNode(inline);
  }

  final public void Inline() throws ParseException {
    InlineTag();
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 19:
      case 22:
      case 23:
        ;
        break;
      default:
        jj_la1[101] = jj_gen;
        break label_35;
      }
      InlineElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      SceneNodes();
      jj_consume_token(148);
      break;
    default:
      jj_la1[102] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT LOD %Children; >
// <!ATTLIST LOD
//     center CDATA "(0 0 0)"
//     range  CDATA #IMPLIED
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void LODElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 149:
      jj_consume_token(149);
      jj_consume_token(5);
      value = FieldString();
                        ((LODNode)getCurrentNode()).setRanges(value);
      break;
    case 150:
      jj_consume_token(150);
      jj_consume_token(5);
      value = FieldString();
                        ((LODNode)getCurrentNode()).setCenter(value);
      break;
    default:
      jj_la1[103] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void LODTag() throws ParseException {
    jj_consume_token(151);
                        LODNode lod = new LODNode();
                        addNode(lod);
                        PushNode(lod);
  }

  final public void LOD() throws ParseException {
    LODTag();
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 149:
      case 150:
        ;
        break;
      default:
        jj_la1[104] = jj_gen;
        break label_36;
      }
      LODElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      Children();
      jj_consume_token(152);
      break;
    default:
      jj_la1[105] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Material EMPTY >
// <!ATTLIST Material
//     ambientIntensity CDATA "0.2"
//     diffuseColor     CDATA "(0.8 0.8 0.8)"
//     emissiveColor    CDATA "(0 0 0)"
//     shininess        CDATA "0.2"
//     specularColor    CDATA "(0 0 0)"
//     transparency     CDATA "0"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void MaterialElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 95:
      jj_consume_token(95);
      jj_consume_token(5);
      value = FieldString();
                        ((MaterialNode)getCurrentNode()).setAmbientIntensity(value);
      break;
    case 153:
      jj_consume_token(153);
      jj_consume_token(5);
      value = FieldString();
                        ((MaterialNode)getCurrentNode()).setShininess(value);
      break;
    case 154:
      jj_consume_token(154);
      jj_consume_token(5);
      value = FieldString();
                        ((MaterialNode)getCurrentNode()).setTransparency(value);
      break;
    case 155:
      jj_consume_token(155);
      jj_consume_token(5);
      value = FieldString();
                        ((MaterialNode)getCurrentNode()).setDiffuseColor(value);
      break;
    case 156:
      jj_consume_token(156);
      jj_consume_token(5);
      value = FieldString();
                        ((MaterialNode)getCurrentNode()).setSpecularColor(value);
      break;
    case 157:
      jj_consume_token(157);
      jj_consume_token(5);
      value = FieldString();
                        ((MaterialNode)getCurrentNode()).setEmissiveColor(value);
      break;
    default:
      jj_la1[106] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MaterialTag() throws ParseException {
    jj_consume_token(158);
                        MaterialNode mat = new MaterialNode();
                        addNode(mat);
                        PushNode(mat);
  }

  final public void Material() throws ParseException {
    MaterialTag();
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 95:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
        ;
        break;
      default:
        jj_la1[107] = jj_gen;
        break label_37;
      }
      MaterialElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(159);
      break;
    default:
      jj_la1[108] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT MovieTexture EMPTY >
// <!ATTLIST MovieTexture
//     loop      (true|false) "true"
//     speed     CDATA "1.0"
//     startTime CDATA "0"
//     stopTime  CDATA "0"
//     url       CDATA #IMPLIED
//     repeatS   (true|false) "true"
//     repeatT   (true|false) "true"
//     duration  CDATA "0.0" 
//     isActive  (true|false) "false"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void MovieTextureElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 19:
      jj_consume_token(19);
      jj_consume_token(5);
      value = FieldString();
                        ((MovieTextureNode)getCurrentNode()).setURLs(value);
      break;
    case 135:
      jj_consume_token(135);
      jj_consume_token(5);
      value = FieldString();
                        ((MovieTextureNode)getCurrentNode()).setRepeatS(value);
      break;
    case 136:
      jj_consume_token(136);
      jj_consume_token(5);
      value = FieldString();
                        ((MovieTextureNode)getCurrentNode()).setRepeatT(value);
      break;
    case 28:
      jj_consume_token(28);
      jj_consume_token(5);
      value = FieldString();
                        ((MovieTextureNode)getCurrentNode()).setLoop(value);
      break;
    case 30:
      jj_consume_token(30);
      jj_consume_token(5);
      value = FieldString();
                        ((MovieTextureNode)getCurrentNode()).setStartTime(value);
      break;
    case 31:
      jj_consume_token(31);
      jj_consume_token(5);
      value = FieldString();
                        ((MovieTextureNode)getCurrentNode()).setStopTime(value);
      break;
    case 160:
      jj_consume_token(160);
      jj_consume_token(5);
      value = FieldString();
                        ((MovieTextureNode)getCurrentNode()).setSpeed(value);
      break;
    case 33:
      jj_consume_token(33);
      jj_consume_token(5);
      value = FieldString();
                        ((MovieTextureNode)getCurrentNode()).setIsActive(value);
      break;
    default:
      jj_la1[109] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MovieTextureTag() throws ParseException {
    jj_consume_token(161);
                        MovieTextureNode texture = new MovieTextureNode();
                        addNode(texture);
                        PushNode(texture);
  }

  final public void MovieTexture() throws ParseException {
    MovieTextureTag();
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 19:
      case 28:
      case 30:
      case 31:
      case 33:
      case 135:
      case 136:
      case 160:
        ;
        break;
      default:
        jj_la1[110] = jj_gen;
        break label_38;
      }
      MovieTextureElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(162);
      break;
    default:
      jj_la1[111] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT NavigationInfo EMPTY >
// <!ATTLIST NavigationInfo
//     avatarSize      CDATA "[0.25 1.6 0.75]"
//     headlight       (true|false) "true"
//     speed           CDATA "1"
//     type            NMTOKENS #IMPLIED
//     visibilityLimit CDATA "0"
//     bind            (true|false) "false"
//     bindTime        CDATA "-1"
//     isBound         (true|false) "false"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void NavigationInfoElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 163:
      jj_consume_token(163);
      jj_consume_token(5);
      value = FieldString();
                        ((NavigationInfoNode)getCurrentNode()).setAvatarSizes(value);
      break;
    case 164:
      jj_consume_token(164);
      jj_consume_token(5);
      value = FieldString();
                        ((NavigationInfoNode)getCurrentNode()).setTypes(value);
      break;
    case 165:
      jj_consume_token(165);
      jj_consume_token(5);
      value = FieldString();
                        ((NavigationInfoNode)getCurrentNode()).setHeadlight(value);
      break;
    case 160:
      jj_consume_token(160);
      jj_consume_token(5);
      value = FieldString();
                        ((NavigationInfoNode)getCurrentNode()).setSpeed(value);
      break;
    case 166:
      jj_consume_token(166);
      jj_consume_token(5);
      value = FieldString();
                        ((NavigationInfoNode)getCurrentNode()).setVisibilityLimit(value);
      break;
    case 46:
      jj_consume_token(46);
      jj_consume_token(5);
      value = FieldString();
                        ((NavigationInfoNode)getCurrentNode()).setBind(value);
      break;
    case 47:
      jj_consume_token(47);
      jj_consume_token(5);
      value = FieldString();
                        ((NavigationInfoNode)getCurrentNode()).setBindTime(value);
      break;
    case 48:
      jj_consume_token(48);
      jj_consume_token(5);
      value = FieldString();
                        ((NavigationInfoNode)getCurrentNode()).setIsBound(value);
      break;
    default:
      jj_la1[112] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NavigationInfoTag() throws ParseException {
    jj_consume_token(167);
                        NavigationInfoNode navInfo = new NavigationInfoNode();
                        addNode(navInfo);
                        PushNode(navInfo);
  }

  final public void NavigationInfo() throws ParseException {
    NavigationInfoTag();
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 46:
      case 47:
      case 48:
      case 160:
      case 163:
      case 164:
      case 165:
      case 166:
        ;
        break;
      default:
        jj_la1[113] = jj_gen;
        break label_39;
      }
      NavigationInfoElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(168);
      break;
    default:
      jj_la1[114] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Normal EMPTY >
// <!ATTLIST Normal
//     vector    CDATA #REQUIRED
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void NormalElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 169:
      jj_consume_token(169);
      jj_consume_token(5);
      value = FieldString();
                        ((NormalNode)getCurrentNode()).setVectors(value);
      break;
    default:
      jj_la1[115] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NormalTag() throws ParseException {
    jj_consume_token(170);
                        NormalNode normal = new NormalNode();
                        addNode(normal);
                        PushNode(normal);
  }

  final public void Normal() throws ParseException {
    NormalTag();
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 169:
        ;
        break;
      default:
        jj_la1[116] = jj_gen;
        break label_40;
      }
      NormalElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(171);
      break;
    default:
      jj_la1[117] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT NormalInterpolator EMPTY >
// <!ATTLIST NormalInterpolator
//     key      CDATA #IMPLIED
//     keyValue CDATA #IMPLIED
//     fraction CDATA "0"
//     value    CDATA "(0 0 0)"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void NormalInterpolatorElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 64:
      jj_consume_token(64);
      jj_consume_token(5);
      value = FieldString();
                        ((NormalInterpolatorNode)getCurrentNode()).setKeys(value);
      break;
    case 65:
      jj_consume_token(65);
      jj_consume_token(5);
      value = FieldString();
                        ((NormalInterpolatorNode)getCurrentNode()).setKeyValues(value);
      break;
    case 66:
      jj_consume_token(66);
      jj_consume_token(5);
      value = FieldString();
                        ((NormalInterpolatorNode)getCurrentNode()).setFraction(value);
      break;
    case 67:
      jj_consume_token(67);
      jj_consume_token(5);
      value = FieldString();
                        ((NormalInterpolatorNode)getCurrentNode()).setValue(value);
      break;
    default:
      jj_la1[118] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NormalInterpolatorTag() throws ParseException {
    jj_consume_token(172);
                        NormalInterpolatorNode normalInterp = new NormalInterpolatorNode();
                        addNode(normalInterp);
                        PushNode(normalInterp);
  }

  final public void NormalInterpolator() throws ParseException {
    NormalInterpolatorTag();
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 64:
      case 65:
      case 66:
      case 67:
        ;
        break;
      default:
        jj_la1[119] = jj_gen;
        break label_41;
      }
      NormalInterpolatorElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(173);
      break;
    default:
      jj_la1[120] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT OrientationInterpolator EMPTY >
// <!ATTLIST OrientationInterpolator
//     key      CDATA #IMPLIED
//     keyValue CDATA #IMPLIED
//     fraction CDATA "0"
//     value    CDATA "(0 0 1 0)"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void OrientationInterpolatorElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 64:
      jj_consume_token(64);
      jj_consume_token(5);
      value = FieldString();
                        ((OrientationInterpolatorNode)getCurrentNode()).setKeys(value);
      break;
    case 65:
      jj_consume_token(65);
      jj_consume_token(5);
      value = FieldString();
                        ((OrientationInterpolatorNode)getCurrentNode()).setKeyValues(value);
      break;
    case 66:
      jj_consume_token(66);
      jj_consume_token(5);
      value = FieldString();
                        ((OrientationInterpolatorNode)getCurrentNode()).setFraction(value);
      break;
    case 67:
      jj_consume_token(67);
      jj_consume_token(5);
      value = FieldString();
                        ((OrientationInterpolatorNode)getCurrentNode()).setValue(value);
      break;
    default:
      jj_la1[121] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OrientationInterpolatorTag() throws ParseException {
    jj_consume_token(174);
                        OrientationInterpolatorNode normalInterp = new OrientationInterpolatorNode();
                        addNode(normalInterp);
                        PushNode(normalInterp);
  }

  final public void OrientationInterpolator() throws ParseException {
    OrientationInterpolatorTag();
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 64:
      case 65:
      case 66:
      case 67:
        ;
        break;
      default:
        jj_la1[122] = jj_gen;
        break label_42;
      }
      OrientationInterpolatorElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(175);
      break;
    default:
      jj_la1[123] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT PixelTexture EMPTY >
// <!ATTLIST PixelTexture 
//     image   CDATA "(0 0 0)"
//     repeatS (true|false) "true"
//     repeatT (true|false) "true"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void PixelTextureElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 176:
      jj_consume_token(176);
      jj_consume_token(5);
      value = FieldString();
                        ((PixelTextureNode)getCurrentNode()).setImages(value);
      break;
    case 135:
      jj_consume_token(135);
      jj_consume_token(5);
      value = FieldString();
                        ((PixelTextureNode)getCurrentNode()).setRepeatS(value);
      break;
    case 136:
      jj_consume_token(136);
      jj_consume_token(5);
      value = FieldString();
                        ((PixelTextureNode)getCurrentNode()).setRepeatT(value);
      break;
    default:
      jj_la1[124] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PixelTextureTag() throws ParseException {
    jj_consume_token(177);
                        PixelTextureNode texture = new PixelTextureNode();
                        addNode(texture);
                        PushNode(texture);
  }

  final public void PixelTexture() throws ParseException {
    PixelTextureTag();
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 135:
      case 136:
      case 176:
        ;
        break;
      default:
        jj_la1[125] = jj_gen;
        break label_43;
      }
      PixelTextureElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(178);
      break;
    default:
      jj_la1[126] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT PlaneSensor EMPTY >
// <!ATTLIST PlaneSensor 
//     autoOffset  (true|false) "true"
//     enabled     (true|false) "true"
//     maxPosition CDATA "(-1 -1)"
//     minPosition CDATA "(0 0)"
//     offset      CDATA "(0 0 0)"
//     isActive    (true|false) "false"
//     trackPoint  CDATA "(0 0 0)"
//     translation CDATA "(0 0 0)"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void PlaneSensorElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 179:
      jj_consume_token(179);
      jj_consume_token(5);
      value = FieldString();
                        ((PlaneSensorNode)getCurrentNode()).setMaxPosition(value);
      break;
    case 88:
      jj_consume_token(88);
      jj_consume_token(5);
      value = FieldString();
                        ((PlaneSensorNode)getCurrentNode()).setOffset(value);
      break;
    case 89:
      jj_consume_token(89);
      jj_consume_token(5);
      value = FieldString();
                        ((PlaneSensorNode)getCurrentNode()).setEnabled(value);
      break;
    case 90:
      jj_consume_token(90);
      jj_consume_token(5);
      value = FieldString();
                        ((PlaneSensorNode)getCurrentNode()).setAutoOffset(value);
      break;
    case 33:
      jj_consume_token(33);
      jj_consume_token(5);
      value = FieldString();
                        ((PlaneSensorNode)getCurrentNode()).setIsActive(value);
      break;
    default:
      jj_la1[127] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PlaneSensorTag() throws ParseException {
    jj_consume_token(180);
                        PlaneSensorNode sensor = new PlaneSensorNode();
                        addNode(sensor);
                        PushNode(sensor);
  }

  final public void PlaneSensor() throws ParseException {
    PlaneSensorTag();
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 33:
      case 88:
      case 89:
      case 90:
      case 179:
        ;
        break;
      default:
        jj_la1[128] = jj_gen;
        break label_44;
      }
      PlaneSensorElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(181);
      break;
    default:
      jj_la1[129] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT PointLight EMPTY >
// <!ATTLIST PointLight
//     ambientIntensity CDATA "0"
//     attenuation      CDATA "(1 0 0)"
//     color            CDATA "(1 1 1)"
//     intensity        CDATA "1"
//     location         CDATA "(0 0 0)"
//     on               (true|false) "true"
//     radius           CDATA "100"  
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void PointLightElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 93:
      jj_consume_token(93);
      jj_consume_token(5);
      value = FieldString();
                        ((PointLightNode)getCurrentNode()).setOn(value);
      break;
    case 94:
      jj_consume_token(94);
      jj_consume_token(5);
      value = FieldString();
                        ((PointLightNode)getCurrentNode()).setIntensity(value);
      break;
    case 95:
      jj_consume_token(95);
      jj_consume_token(5);
      value = FieldString();
                        ((PointLightNode)getCurrentNode()).setAmbientIntensity(value);
      break;
    case 61:
      jj_consume_token(61);
      jj_consume_token(5);
      value = FieldString();
                        ((PointLightNode)getCurrentNode()).setColor(value);
      break;
    case 82:
      jj_consume_token(82);
      jj_consume_token(5);
      value = FieldString();
                        ((PointLightNode)getCurrentNode()).setRadius(value);
      break;
    case 182:
      jj_consume_token(182);
      jj_consume_token(5);
      value = FieldString();
                        ((PointLightNode)getCurrentNode()).setLocation(value);
      break;
    case 183:
      jj_consume_token(183);
      jj_consume_token(5);
      value = FieldString();
                        ((PointLightNode)getCurrentNode()).setAttenuation(value);
      break;
    default:
      jj_la1[130] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PointLightTag() throws ParseException {
    jj_consume_token(184);
                        PointLightNode light = new PointLightNode();
                        addNode(light);
                        PushNode(light);
  }

  final public void PointLight() throws ParseException {
    PointLightTag();
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 61:
      case 82:
      case 93:
      case 94:
      case 95:
      case 182:
      case 183:
        ;
        break;
      default:
        jj_la1[131] = jj_gen;
        break label_45;
      }
      PointLightElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(185);
      break;
    default:
      jj_la1[132] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT PointSet ( ( (Color?), (Coordinate?) ) |
//                      ( (Coordinate?), (Color?) ) ) >
// <!ATTLIST PointSet
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void PointSetElement() throws ParseException {
        String  name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    default:
      jj_la1[133] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PointSetTag() throws ParseException {
    jj_consume_token(186);
                        PointSetNode point = new PointSetNode();
                        addNode(point);
                        PushNode(point);
  }

  final public void PointSetChildren() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 62:
      Color();
      break;
    default:
      jj_la1[134] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 77:
      Coordinate();
      break;
    default:
      jj_la1[135] = jj_gen;
      ;
    }
  }

  final public void PointSet() throws ParseException {
    PointSetTag();
    label_46:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
        ;
        break;
      default:
        jj_la1[138] = jj_gen;
        break label_46;
      }
      PointSetElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      PointSetChildren();
      jj_consume_token(187);
      break;
    default:
      jj_la1[139] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        getCurrentNode().initialize();
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT PositionInterpolator EMPTY >
// <!ATTLIST PositionInterpolator
//     key      CDATA #IMPLIED
//     keyValue CDATA #IMPLIED
//     fraction CDATA "0"
//     value    CDATA "(0 0 0)"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void PositionInterpolatorElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 64:
      jj_consume_token(64);
      jj_consume_token(5);
      value = FieldString();
                        ((PositionInterpolatorNode)getCurrentNode()).setKeys(value);
      break;
    case 65:
      jj_consume_token(65);
      jj_consume_token(5);
      value = FieldString();
                        ((PositionInterpolatorNode)getCurrentNode()).setKeyValues(value);
      break;
    case 66:
      jj_consume_token(66);
      jj_consume_token(5);
      value = FieldString();
                        ((PositionInterpolatorNode)getCurrentNode()).setFraction(value);
      break;
    case 67:
      jj_consume_token(67);
      jj_consume_token(5);
      value = FieldString();
                        ((PositionInterpolatorNode)getCurrentNode()).setValue(value);
      break;
    default:
      jj_la1[140] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PositionInterpolatorTag() throws ParseException {
    jj_consume_token(188);
                        PositionInterpolatorNode normalInterp = new PositionInterpolatorNode();
                        addNode(normalInterp);
                        PushNode(normalInterp);
  }

  final public void PositionInterpolator() throws ParseException {
    PositionInterpolatorTag();
    label_47:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 64:
      case 65:
      case 66:
      case 67:
        ;
        break;
      default:
        jj_la1[141] = jj_gen;
        break label_47;
      }
      PositionInterpolatorElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(189);
      break;
    default:
      jj_la1[142] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT ProximitySensor EMPTY >
// <!ATTLIST ProximitySensor
//     center      CDATA "(0 0 0)"
//     size        CDATA "(0 0 0)"
//     enabled     (true|false) "true"
//     isActive    (true|false) "false"
//     position    CDATA "(0 0 0)"
//     orientation CDATA "(0 0 1 0)"
//     enterTime   CDATA "0"
//     exitTime    CDATA "0"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void ProximitySensorElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 150:
      jj_consume_token(150);
      jj_consume_token(5);
      value = FieldString();
                        ((ProximitySensorNode)getCurrentNode()).setCenter(value);
      break;
    case 54:
      jj_consume_token(54);
      jj_consume_token(5);
      value = FieldString();
                        ((ProximitySensorNode)getCurrentNode()).setSize(value);
      break;
    case 190:
      jj_consume_token(190);
      jj_consume_token(5);
      value = FieldString();
                        ((ProximitySensorNode)getCurrentNode()).setPosition(value);
      break;
    case 111:
      jj_consume_token(111);
      jj_consume_token(5);
      value = FieldString();
                        ((ProximitySensorNode)getCurrentNode()).setOrientation(value);
      break;
    case 191:
      jj_consume_token(191);
      jj_consume_token(5);
      value = FieldString();
                        ((ProximitySensorNode)getCurrentNode()).setEnterTime(value);
      break;
    case 192:
      jj_consume_token(192);
      jj_consume_token(5);
      value = FieldString();
                        ((ProximitySensorNode)getCurrentNode()).setExitTime(value);
      break;
    case 89:
      jj_consume_token(89);
      jj_consume_token(5);
      value = FieldString();
                        ((ProximitySensorNode)getCurrentNode()).setEnabled(value);
      break;
    case 33:
      jj_consume_token(33);
      jj_consume_token(5);
      value = FieldString();
                        ((ProximitySensorNode)getCurrentNode()).setIsActive(value);
      break;
    default:
      jj_la1[143] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ProximitySensorTag() throws ParseException {
    jj_consume_token(193);
                        ProximitySensorNode sensor = new ProximitySensorNode();
                        addNode(sensor);
                        PushNode(sensor);
  }

  final public void ProximitySensor() throws ParseException {
    ProximitySensorTag();
    label_48:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 33:
      case 54:
      case 89:
      case 111:
      case 150:
      case 190:
      case 191:
      case 192:
        ;
        break;
      default:
        jj_la1[144] = jj_gen;
        break label_48;
      }
      ProximitySensorElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(194);
      break;
    default:
      jj_la1[145] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Proxy ( %CollisionProxyNodes; )? >
// <!ATTLIST Proxy
//     DEF ID      #IMPLIED 
//     USE IDREF   #IMPLIED >
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void ProxyElement() throws ParseException {
        String  name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    default:
      jj_la1[146] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ProxyTag() throws ParseException {
    jj_consume_token(195);
                        ProxyNode sensor = new ProxyNode();
                        addNode(sensor);
                        PushNode(sensor);
  }

  final public void Proxy() throws ParseException {
    ProxyTag();
    label_49:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
        ;
        break;
      default:
        jj_la1[147] = jj_gen;
        break label_49;
      }
      ProxyElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      CollisionProxyNodes();
      jj_consume_token(196);
      break;
    default:
      jj_la1[148] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT ScalarInterpolator EMPTY >
// <!ATTLIST ScalarInterpolator
//     key      CDATA #IMPLIED
//     keyValue CDATA #IMPLIED
//     fraction CDATA "0"
//     value    CDATA "0"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void ScalarInterpolatorElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 64:
      jj_consume_token(64);
      jj_consume_token(5);
      value = FieldString();
                        ((ScalarInterpolatorNode)getCurrentNode()).setKeys(value);
      break;
    case 65:
      jj_consume_token(65);
      jj_consume_token(5);
      value = FieldString();
                        ((ScalarInterpolatorNode)getCurrentNode()).setKeyValues(value);
      break;
    case 66:
      jj_consume_token(66);
      jj_consume_token(5);
      value = FieldString();
                        ((ScalarInterpolatorNode)getCurrentNode()).setFraction(value);
      break;
    case 67:
      jj_consume_token(67);
      jj_consume_token(5);
      value = FieldString();
                        ((ScalarInterpolatorNode)getCurrentNode()).setValue(value);
      break;
    default:
      jj_la1[149] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ScalarInterpolatorTag() throws ParseException {
    jj_consume_token(197);
                        ScalarInterpolatorNode normalInterp = new ScalarInterpolatorNode();
                        addNode(normalInterp);
                        PushNode(normalInterp);
  }

  final public void ScalarInterpolator() throws ParseException {
    ScalarInterpolatorTag();
    label_50:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 64:
      case 65:
      case 66:
      case 67:
        ;
        break;
      default:
        jj_la1[150] = jj_gen;
        break label_50;
      }
      ScalarInterpolatorElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(198);
      break;
    default:
      jj_la1[151] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!-- Script is similar to PROTO regarding user definition
//      of multiple eventIn, field, eventOut -->
// 
// <!ELEMENT Script ( eventIn*, field*, eventOut* )+ >
// <!ATTLIST Script
//     url          CDATA #IMPLIED
//     directOutput (true|false) "false"
//     mustEvaluate (true|false) "false"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void ScriptElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 19:
      jj_consume_token(19);
      jj_consume_token(5);
      value = FieldString();
                        ((ScriptNode)getCurrentNode()).setURLs(value);
      break;
    case 199:
      jj_consume_token(199);
      jj_consume_token(5);
      value = FieldString();
                        ((ScriptNode)getCurrentNode()).setDirectOutput(value);
      break;
    case 200:
      jj_consume_token(200);
      jj_consume_token(5);
      value = FieldString();
                        ((ScriptNode)getCurrentNode()).setMustEvaluate(value);
      break;
    default:
      jj_la1[152] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ScriptTag() throws ParseException {
    jj_consume_token(201);
                        ScriptNode script = new ScriptNode();
                        addNode(script);
                        PushNode(script);
  }

  final public void Script() throws ParseException {
    ScriptTag();
    label_51:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 19:
      case 199:
      case 200:
        ;
        break;
      default:
        jj_la1[153] = jj_gen;
        break label_51;
      }
      ScriptElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(202);
      break;
    default:
      jj_la1[154] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Shape ( ( Appearance?, (%GeometryNodes;)? ) |
//                 ( (%GeometryNodes;)?, Appearance? ))   >
// <!ATTLIST Shape
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void ShapeElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    default:
      jj_la1[155] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ShapeTag() throws ParseException {
    jj_consume_token(203);
                        ShapeNode script = new ShapeNode();
                        addNode(script);
                        PushNode(script);
  }

  final public void ShapeChildren() throws ParseException {
    label_52:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
      case 55:
      case 74:
      case 83:
      case 108:
      case 117:
      case 143:
      case 145:
      case 186:
      case 213:
      case 229:
        ;
        break;
      default:
        jj_la1[156] = jj_gen;
        break label_52;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 55:
      case 74:
      case 83:
      case 108:
      case 117:
      case 143:
      case 145:
      case 186:
      case 213:
      case 229:
        GeometryNodes();
        break;
      case 26:
        Appearance();
        break;
      default:
        jj_la1[157] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Shape() throws ParseException {
    ShapeTag();
    label_53:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
        ;
        break;
      default:
        jj_la1[158] = jj_gen;
        break label_53;
      }
      ShapeElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      ShapeChildren();
      jj_consume_token(204);
      break;
    default:
      jj_la1[159] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Sound ( AudioClip | MovieTexture ) >
// <!ATTLIST Sound
//     direction  CDATA "(0 0 1)"
//     intensity  CDATA "1"
//     location   CDATA "(0 0 0)"
//     maxBack    CDATA "10"
//     maxFront   CDATA "10"
//     minBack    CDATA "1"
//     minFront   CDATA "1"
//     priority   CDATA "0"
//     spatialize (true|false) "true"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void SoundElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 205:
      jj_consume_token(205);
      jj_consume_token(5);
      value = FieldString();
                        ((SoundNode)getCurrentNode()).setSpatialize(value);
      break;
    case 94:
      jj_consume_token(94);
      jj_consume_token(5);
      value = FieldString();
                        ((SoundNode)getCurrentNode()).setIntensity(value);
      break;
    case 206:
      jj_consume_token(206);
      jj_consume_token(5);
      value = FieldString();
                        ((SoundNode)getCurrentNode()).setMaxBack(value);
      break;
    case 207:
      jj_consume_token(207);
      jj_consume_token(5);
      value = FieldString();
                        ((SoundNode)getCurrentNode()).setMinBack(value);
      break;
    case 208:
      jj_consume_token(208);
      jj_consume_token(5);
      value = FieldString();
                        ((SoundNode)getCurrentNode()).setMaxFront(value);
      break;
    case 209:
      jj_consume_token(209);
      jj_consume_token(5);
      value = FieldString();
                        ((SoundNode)getCurrentNode()).setMinFront(value);
      break;
    case 210:
      jj_consume_token(210);
      jj_consume_token(5);
      value = FieldString();
                        ((SoundNode)getCurrentNode()).setPriority(value);
      break;
    case 96:
      jj_consume_token(96);
      jj_consume_token(5);
      value = FieldString();
                        ((SoundNode)getCurrentNode()).setDirection(value);
      break;
    case 182:
      jj_consume_token(182);
      jj_consume_token(5);
      value = FieldString();
                        ((SoundNode)getCurrentNode()).setLocation(value);
      break;
    default:
      jj_la1[160] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SoundTag() throws ParseException {
    jj_consume_token(211);
                        SoundNode sound = new SoundNode();
                        addNode(sound);
                        PushNode(sound);
  }

  final public void Sound() throws ParseException {
    SoundTag();
    label_54:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 94:
      case 96:
      case 182:
      case 205:
      case 206:
      case 207:
      case 208:
      case 209:
      case 210:
        ;
        break;
      default:
        jj_la1[161] = jj_gen;
        break label_54;
      }
      SoundElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        AudioClip();
        break;
      case 161:
        MovieTexture();
        break;
      default:
        jj_la1[162] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(212);
      break;
    default:
      jj_la1[163] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Sphere EMPTY >
// <!ATTLIST Sphere
//     radius CDATA "1"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void SphereElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 82:
      jj_consume_token(82);
      jj_consume_token(5);
      value = FieldString();
                        ((SphereNode)getCurrentNode()).setRadius(value);
      break;
    default:
      jj_la1[164] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SphereTag() throws ParseException {
    jj_consume_token(213);
                        SphereNode sphere = new SphereNode();
                        addNode(sphere);
                        PushNode(sphere);
  }

  final public void Sphere() throws ParseException {
    SphereTag();
    label_55:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 82:
        ;
        break;
      default:
        jj_la1[165] = jj_gen;
        break label_55;
      }
      SphereElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(214);
      break;
    default:
      jj_la1[166] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT SphereSensor EMPTY >
// <!ATTLIST SphereSensor 
//     autoOffset (true|false) "true"
//     enabled    (true|false) "true"
//     offset     CDATA "(0 1 0 0)"
//     isActive   (true|false) "false"
//     rotation   CDATA "(0 1 0 0)"
//     trackPoint CDATA "(0 0 0)"
//     DEF ID         #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void SphereSensorElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 88:
      jj_consume_token(88);
      jj_consume_token(5);
      value = FieldString();
                        ((SphereSensorNode)getCurrentNode()).setOffset(value);
      break;
    case 89:
      jj_consume_token(89);
      jj_consume_token(5);
      value = FieldString();
                        ((SphereSensorNode)getCurrentNode()).setEnabled(value);
      break;
    case 90:
      jj_consume_token(90);
      jj_consume_token(5);
      value = FieldString();
                        ((SphereSensorNode)getCurrentNode()).setAutoOffset(value);
      break;
    case 215:
      jj_consume_token(215);
      jj_consume_token(5);
      value = FieldString();
                        ((SphereSensorNode)getCurrentNode()).setRotation(value);
      break;
    case 216:
      jj_consume_token(216);
      jj_consume_token(5);
      value = FieldString();
                        ((SphereSensorNode)getCurrentNode()).setTrackPoint(value);
      break;
    case 33:
      jj_consume_token(33);
      jj_consume_token(5);
      value = FieldString();
                        ((SphereSensorNode)getCurrentNode()).setIsActive(value);
      break;
    default:
      jj_la1[167] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SphereSensorTag() throws ParseException {
    jj_consume_token(217);
                        SphereSensorNode sensor = new SphereSensorNode();
                        addNode(sensor);
                        PushNode(sensor);
  }

  final public void SphereSensor() throws ParseException {
    SphereSensorTag();
    label_56:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 33:
      case 88:
      case 89:
      case 90:
      case 215:
      case 216:
        ;
        break;
      default:
        jj_la1[168] = jj_gen;
        break label_56;
      }
      SphereSensorElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(218);
      break;
    default:
      jj_la1[169] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT SpotLight EMPTY >
// <!ATTLIST SpotLight
//     ambientIntensity CDATA "0"
//     attenuation      CDATA "(1 0 0)"
//     beamWidth        CDATA "1.570796"
//     color            CDATA "(1 1 1)"
//     cutOffAngle      CDATA ".785398"
//     direction        CDATA "(0 0 -1)"
//     intensity        CDATA "1"
//     location         CDATA "(0 0 0)"
//     on               (true|false) "true"
//     radius           CDATA "100"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void SpotLightElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 93:
      jj_consume_token(93);
      jj_consume_token(5);
      value = FieldString();
                        ((SpotLightNode)getCurrentNode()).setOn(value);
      break;
    case 94:
      jj_consume_token(94);
      jj_consume_token(5);
      value = FieldString();
                        ((SpotLightNode)getCurrentNode()).setIntensity(value);
      break;
    case 95:
      jj_consume_token(95);
      jj_consume_token(5);
      value = FieldString();
                        ((SpotLightNode)getCurrentNode()).setAmbientIntensity(value);
      break;
    case 219:
      jj_consume_token(219);
      jj_consume_token(5);
      value = FieldString();
                        ((SpotLightNode)getCurrentNode()).setBeamWidth(value);
      break;
    case 220:
      jj_consume_token(220);
      jj_consume_token(5);
      value = FieldString();
                        ((SpotLightNode)getCurrentNode()).setCutOffAngle(value);
      break;
    case 61:
      jj_consume_token(61);
      jj_consume_token(5);
      value = FieldString();
                        ((SpotLightNode)getCurrentNode()).setColor(value);
      break;
    case 96:
      jj_consume_token(96);
      jj_consume_token(5);
      value = FieldString();
                        ((SpotLightNode)getCurrentNode()).setDirection(value);
      break;
    case 182:
      jj_consume_token(182);
      jj_consume_token(5);
      value = FieldString();
                        ((SpotLightNode)getCurrentNode()).setLocation(value);
      break;
    case 183:
      jj_consume_token(183);
      jj_consume_token(5);
      value = FieldString();
                        ((SpotLightNode)getCurrentNode()).setAttenuation(value);
      break;
    case 82:
      jj_consume_token(82);
      jj_consume_token(5);
      value = FieldString();
                        ((SpotLightNode)getCurrentNode()).setRadius(value);
      break;
    default:
      jj_la1[170] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SpotLightTag() throws ParseException {
    jj_consume_token(221);
                        SpotLightNode light = new SpotLightNode();
                        addNode(light);
                        PushNode(light);
  }

  final public void SpotLight() throws ParseException {
    SpotLightTag();
    label_57:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 61:
      case 82:
      case 93:
      case 94:
      case 95:
      case 96:
      case 182:
      case 183:
      case 219:
      case 220:
        ;
        break;
      default:
        jj_la1[171] = jj_gen;
        break label_57;
      }
      SpotLightElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(222);
      break;
    default:
      jj_la1[172] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Switch  %Children; >
// <!ATTLIST Switch
//     whichChoice CDATA "-1"
//     DEF ID         #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void SwitchElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 223:
      jj_consume_token(223);
      jj_consume_token(5);
      value = FieldString();
                        ((SwitchNode)getCurrentNode()).setWhichChoice(value);
      break;
    default:
      jj_la1[173] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SwitchTag() throws ParseException {
    jj_consume_token(224);
                        SwitchNode snode = new SwitchNode();
                        addNode(snode);
                        PushNode(snode);
  }

  final public void Switch() throws ParseException {
    SwitchTag();
    label_58:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 223:
        ;
        break;
      default:
        jj_la1[174] = jj_gen;
        break label_58;
      }
      SwitchElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      Children();
      jj_consume_token(225);
      break;
    default:
      jj_la1[175] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Text ( FontStyle? ) >
// <!ATTLIST Text
//     string    CDATA #IMPLIED
//     length    CDATA #IMPLIED
//     maxExtent CDATA "0"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void TextElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 226:
      jj_consume_token(226);
      jj_consume_token(5);
      value = FieldString();
//			((TextNode)getCurrentNode()).setStrings(value);
                        ((TextNode)getCurrentNode()).addString(value);
      break;
    case 227:
      jj_consume_token(227);
      jj_consume_token(5);
      value = FieldString();
                        ((TextNode)getCurrentNode()).setLengths(value);
      break;
    case 228:
      jj_consume_token(228);
      jj_consume_token(5);
      value = FieldString();
                        ((TextNode)getCurrentNode()).setMaxExtent(value);
      break;
    default:
      jj_la1[176] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TextTag() throws ParseException {
    jj_consume_token(229);
                        TextNode text = new TextNode();
                        addNode(text);
                        PushNode(text);
  }

  final public void Text() throws ParseException {
    TextTag();
    label_59:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 226:
      case 227:
      case 228:
        ;
        break;
      default:
        jj_la1[177] = jj_gen;
        break label_59;
      }
      TextElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 131:
        FontStyle();
        break;
      default:
        jj_la1[178] = jj_gen;
        ;
      }
      jj_consume_token(230);
      break;
    default:
      jj_la1[179] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        getCurrentNode().initialize();
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT TextureCoordinate EMPTY >
// <!ATTLIST TextureCoordinate
//     point     CDATA #REQUIRED
//     DEF ID         #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void TextureCoordinateElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 76:
      jj_consume_token(76);
      jj_consume_token(5);
      value = FieldString();
                        ((TextureCoordinateNode)getCurrentNode()).setPoints(value);
      break;
    default:
      jj_la1[180] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TextureCoordinateTag() throws ParseException {
    jj_consume_token(231);
                        TextureCoordinateNode texCoord = new TextureCoordinateNode();
                        addNode(texCoord);
                        PushNode(texCoord);
  }

  final public void TextureCoordinate() throws ParseException {
    TextureCoordinateTag();
    label_60:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 76:
        ;
        break;
      default:
        jj_la1[181] = jj_gen;
        break label_60;
      }
      TextureCoordinateElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(232);
      break;
    default:
      jj_la1[182] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT TextureTransform EMPTY >
// <!ATTLIST TextureTransform
//     center      CDATA "(0 0)"
//     rotation    CDATA "0"
//     scale       CDATA "(1 1)"
//     translation CDATA "(0 0)"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void TextureTransformElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 233:
      jj_consume_token(233);
      jj_consume_token(5);
      value = FieldString();
                        ((TextureTransformNode)getCurrentNode()).setTranslation(value);
      break;
    case 215:
      jj_consume_token(215);
      jj_consume_token(5);
      value = FieldString();
                        ((TextureTransformNode)getCurrentNode()).setRotation(value);
      break;
    case 112:
      jj_consume_token(112);
      jj_consume_token(5);
      value = FieldString();
                        ((TextureTransformNode)getCurrentNode()).setScale(value);
      break;
    case 150:
      jj_consume_token(150);
      jj_consume_token(5);
      value = FieldString();
                        ((TextureTransformNode)getCurrentNode()).setCenter(value);
      break;
    default:
      jj_la1[183] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TextureTransformTag() throws ParseException {
    jj_consume_token(234);
                        TextureTransformNode textureTransform = new TextureTransformNode();
                        addNode(textureTransform);
                        PushNode(textureTransform);
  }

  final public void TextureTransform() throws ParseException {
    TextureTransformTag();
    label_61:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 112:
      case 150:
      case 215:
      case 233:
        ;
        break;
      default:
        jj_la1[184] = jj_gen;
        break label_61;
      }
      TextureTransformElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(235);
      break;
    default:
      jj_la1[185] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT TimeSensor EMPTY >
// <!ATTLIST TimeSensor
//     cycleInterval CDATA "1.0"
//     enabled       (true|false) "true"
//     loop          (true|false) "false"
//     startTime     CDATA "0"
//     stopTime      CDATA "0"
//     cycleTime     CDATA "0"
//     fraction      CDATA "0"
//     isActive      (true|false) "false"
//     time          CDATA "0"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void TimeSensorElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 89:
      jj_consume_token(89);
      jj_consume_token(5);
      value = FieldString();
                        ((TimeSensorNode)getCurrentNode()).setEnabled(value);
      break;
    case 28:
      jj_consume_token(28);
      jj_consume_token(5);
      value = FieldString();
                        ((TimeSensorNode)getCurrentNode()).setLoop(value);
      break;
    case 236:
      jj_consume_token(236);
      jj_consume_token(5);
      value = FieldString();
                        ((TimeSensorNode)getCurrentNode()).setCycleInterval(value);
      break;
    case 30:
      jj_consume_token(30);
      jj_consume_token(5);
      value = FieldString();
                        ((TimeSensorNode)getCurrentNode()).setStartTime(value);
      break;
    case 31:
      jj_consume_token(31);
      jj_consume_token(5);
      value = FieldString();
                        ((TimeSensorNode)getCurrentNode()).setStopTime(value);
      break;
    case 66:
      jj_consume_token(66);
      jj_consume_token(5);
      value = FieldString();
                        ((TimeSensorNode)getCurrentNode()).setFraction(value);
      break;
    case 237:
      jj_consume_token(237);
      jj_consume_token(5);
      value = FieldString();
                        ((TimeSensorNode)getCurrentNode()).setCycleTime(value);
      break;
    case 238:
      jj_consume_token(238);
      jj_consume_token(5);
      value = FieldString();
                        ((TimeSensorNode)getCurrentNode()).setTime(value);
      break;
    case 33:
      jj_consume_token(33);
      jj_consume_token(5);
      value = FieldString();
                        ((TimeSensorNode)getCurrentNode()).setIsActive(value);
      break;
    default:
      jj_la1[186] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TimeSensorTag() throws ParseException {
    jj_consume_token(239);
                        TimeSensorNode sensor = new TimeSensorNode();
                        addNode(sensor);
                        PushNode(sensor);
  }

  final public void TimeSensor() throws ParseException {
    TimeSensorTag();
    label_62:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 28:
      case 30:
      case 31:
      case 33:
      case 66:
      case 89:
      case 236:
      case 237:
      case 238:
        ;
        break;
      default:
        jj_la1[187] = jj_gen;
        break label_62;
      }
      TimeSensorElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(240);
      break;
    default:
      jj_la1[188] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT TouchSensor EMPTY >
// <!ATTLIST TouchSensor
//     enabled      (true|false) "true"
//     hitNormal    CDATA "(0 0 1)"
//     hitPoint     CDATA "(0 0 0)"
//     hitTexCoord  CDATA "(0 0)"
//     isActive     (true|false) "false"
//     isOver       (true|false) "false"
//     touchTime    CDATA "0"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void TouchSensorElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 89:
      jj_consume_token(89);
      jj_consume_token(5);
      value = FieldString();
                        ((TouchSensorNode)getCurrentNode()).setEnabled(value);
      break;
    case 241:
      jj_consume_token(241);
      jj_consume_token(5);
      value = FieldString();
                        ((TouchSensorNode)getCurrentNode()).setHitNormal(value);
      break;
    case 242:
      jj_consume_token(242);
      jj_consume_token(5);
      value = FieldString();
                        ((TouchSensorNode)getCurrentNode()).setHitPoint(value);
      break;
    case 243:
      jj_consume_token(243);
      jj_consume_token(5);
      value = FieldString();
                        ((TouchSensorNode)getCurrentNode()).setHitTexCoord(value);
      break;
    case 244:
      jj_consume_token(244);
      jj_consume_token(5);
      value = FieldString();
                        ((TouchSensorNode)getCurrentNode()).setIsOver(value);
      break;
    case 245:
      jj_consume_token(245);
      jj_consume_token(5);
      value = FieldString();
                        ((TouchSensorNode)getCurrentNode()).setTouchTime(value);
      break;
    case 33:
      jj_consume_token(33);
      jj_consume_token(5);
      value = FieldString();
                        ((TouchSensorNode)getCurrentNode()).setIsActive(value);
      break;
    default:
      jj_la1[189] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TouchSensorTag() throws ParseException {
    jj_consume_token(246);
                        TouchSensorNode sensor = new TouchSensorNode();
                        addNode(sensor);
                        PushNode(sensor);
  }

  final public void TouchSensor() throws ParseException {
    TouchSensorTag();
    label_63:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 33:
      case 89:
      case 241:
      case 242:
      case 243:
      case 244:
      case 245:
        ;
        break;
      default:
        jj_la1[190] = jj_gen;
        break label_63;
      }
      TouchSensorElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(247);
      break;
    default:
      jj_la1[191] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Transform %Children; >
// <!ATTLIST Transform 
//     center           CDATA "(0 0 0)"
//     rotation         CDATA "(0 0 1 0)"
//     scale            CDATA "(1 1 1)"
//     scaleOrientation CDATA "(0 0 1 0)"
//     translation      CDATA "(0 0 0)"
//     bboxCenter       CDATA "(0 0 0)"
//     bboxSize         CDATA "(-1 -1 -1)"
//     DEF ID       #IMPLIED 
//     USE IDREF    #IMPLIED >
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void TransformElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 233:
      jj_consume_token(233);
      jj_consume_token(5);
      value = FieldString();
                        ((TransformNode)getCurrentNode()).setTranslation(value);
      break;
    case 215:
      jj_consume_token(215);
      jj_consume_token(5);
      value = FieldString();
                        ((TransformNode)getCurrentNode()).setRotation(value);
      break;
    case 112:
      jj_consume_token(112);
      jj_consume_token(5);
      value = FieldString();
                        ((TransformNode)getCurrentNode()).setScale(value);
      break;
    case 248:
      jj_consume_token(248);
      jj_consume_token(5);
      value = FieldString();
                        ((TransformNode)getCurrentNode()).setScaleOrientation(value);
      break;
    case 150:
      jj_consume_token(150);
      jj_consume_token(5);
      value = FieldString();
                        ((TransformNode)getCurrentNode()).setCenter(value);
      break;
    case 22:
      jj_consume_token(22);
      jj_consume_token(5);
      value = FieldString();
                        ((TransformNode)getCurrentNode()).setBoundingBoxCenter(value);
      break;
    case 23:
      jj_consume_token(23);
      jj_consume_token(5);
      value = FieldString();
                        ((TransformNode)getCurrentNode()).setBoundingBoxSize(value);
      break;
    default:
      jj_la1[192] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TransformTag() throws ParseException {
    jj_consume_token(249);
                        TransformNode transform = new TransformNode();
                        addNode(transform);
                        PushNode(transform);
  }

  final public void Transform() throws ParseException {
    TransformTag();
    label_64:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 22:
      case 23:
      case 112:
      case 150:
      case 215:
      case 233:
      case 248:
        ;
        break;
      default:
        jj_la1[193] = jj_gen;
        break label_64;
      }
      TransformElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      Children();
      jj_consume_token(250);
      break;
    default:
      jj_la1[194] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Viewpoint EMPTY >
// <!ATTLIST Viewpoint
//     fieldOfView CDATA "0.785398"
//     jump        (true|false) "true"
//     orientation CDATA "(0 0 1 0)"
//     position    CDATA "(0 0 10)"
//     description CDATA #IMPLIED
//     bind        (true|false) "false"
//     bindTime    CDATA "-1"
//     isBound     (true|false) "false"
//     examine     CDATA "(0 0 0)" 
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
// <!-- examine (point of rotation) is proposed addition, maybe belongs in NavigationInfo instead... -->
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void ViewpointElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 190:
      jj_consume_token(190);
      jj_consume_token(5);
      value = FieldString();
                        ((ViewpointNode)getCurrentNode()).setPosition(value);
      break;
    case 111:
      jj_consume_token(111);
      jj_consume_token(5);
      value = FieldString();
                        ((ViewpointNode)getCurrentNode()).setOrientation(value);
      break;
    case 251:
      jj_consume_token(251);
      jj_consume_token(5);
      value = FieldString();
                        ((ViewpointNode)getCurrentNode()).setFieldOfView(value);
      break;
    case 252:
      jj_consume_token(252);
      jj_consume_token(5);
      value = FieldString();
                        ((ViewpointNode)getCurrentNode()).setJump(value);
      break;
    case 21:
      jj_consume_token(21);
      jj_consume_token(5);
      value = FieldString();
                        ((ViewpointNode)getCurrentNode()).setDescription(value);
      break;
    case 46:
      jj_consume_token(46);
      jj_consume_token(5);
      value = FieldString();
                        ((ViewpointNode)getCurrentNode()).setBind(value);
      break;
    case 47:
      jj_consume_token(47);
      jj_consume_token(5);
      value = FieldString();
                        ((ViewpointNode)getCurrentNode()).setBindTime(value);
      break;
    case 48:
      jj_consume_token(48);
      jj_consume_token(5);
      value = FieldString();
                        ((ViewpointNode)getCurrentNode()).setIsBound(value);
      break;
    default:
      jj_la1[195] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ViewpointTag() throws ParseException {
    jj_consume_token(253);
                        ViewpointNode view = new ViewpointNode();
                        addNode(view);
                        PushNode(view);
  }

  final public void Viewpoint() throws ParseException {
    ViewpointTag();
    label_65:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 21:
      case 46:
      case 47:
      case 48:
      case 111:
      case 190:
      case 251:
      case 252:
        ;
        break;
      default:
        jj_la1[196] = jj_gen;
        break label_65;
      }
      ViewpointElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(254);
      break;
    default:
      jj_la1[197] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT VisibilitySensor EMPTY >
// <!ATTLIST VisibilitySensor 
//     center    CDATA "(0 0 0)"
//     enabled   (true|false) "true"
//     size      CDATA "(0 0 0)"
//     enterTime CDATA "0.0"
//     exitTime  CDATA "0.0"
//     isActive  (true|false) "false"
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void VisibilitySensorElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 150:
      jj_consume_token(150);
      jj_consume_token(5);
      value = FieldString();
                        ((VisibilitySensorNode)getCurrentNode()).setCenter(value);
      break;
    case 54:
      jj_consume_token(54);
      jj_consume_token(5);
      value = FieldString();
                        ((VisibilitySensorNode)getCurrentNode()).setSize(value);
      break;
    case 89:
      jj_consume_token(89);
      jj_consume_token(5);
      value = FieldString();
                        ((VisibilitySensorNode)getCurrentNode()).setEnabled(value);
      break;
    case 33:
      jj_consume_token(33);
      jj_consume_token(5);
      value = FieldString();
                        ((VisibilitySensorNode)getCurrentNode()).setIsActive(value);
      break;
    default:
      jj_la1[198] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void VisibilitySensorTag() throws ParseException {
    jj_consume_token(255);
                        VisibilitySensorNode sensor = new VisibilitySensorNode();
                        addNode(sensor);
                        PushNode(sensor);
  }

  final public void VisibilitySensor() throws ParseException {
    VisibilitySensorTag();
    label_66:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 33:
      case 54:
      case 89:
      case 150:
        ;
        break;
      default:
        jj_la1[199] = jj_gen;
        break label_66;
      }
      VisibilitySensorElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(256);
      break;
    default:
      jj_la1[200] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT WorldInfo EMPTY >
// <!ATTLIST WorldInfo 
//     info  CDATA #IMPLIED
//     title CDATA #IMPLIED
//     DEF ID       #IMPLIED
//     USE IDREF    #IMPLIED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void WorldInfoElement() throws ParseException {
        String  name;
        String  value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(5);
      name = NodeName();
                        getCurrentNode().setName(name);
      break;
    case 18:
      jj_consume_token(18);
      jj_consume_token(5);
      name = NodeName();
                        setCurrentNodeAsInstance(name);
      break;
    case 257:
      jj_consume_token(257);
      jj_consume_token(5);
      value = FieldString();
                        ((WorldInfoNode)getCurrentNode()).setTitle(value);
      break;
    case 258:
      jj_consume_token(258);
      jj_consume_token(5);
      value = FieldString();
//			((WorldInfoNode)getCurrentNode()).setInfos(value);
                        ((WorldInfoNode)getCurrentNode()).addInfo(value);
      break;
    default:
      jj_la1[201] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void WorldInfoTag() throws ParseException {
    jj_consume_token(259);
                        WorldInfoNode winfo = new WorldInfoNode();
                        addNode(winfo);
                        PushNode(winfo);
  }

  final public void WorldInfo() throws ParseException {
    WorldInfoTag();
    label_67:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 257:
      case 258:
        ;
        break;
      default:
        jj_la1[202] = jj_gen;
        break label_67;
      }
      WorldInfoElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(260);
      break;
    default:
      jj_la1[203] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        PopNode();
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT eventIn EMPTY >
// <!ATTLIST eventIn
//     name  NMTOKEN      #REQUIRED
//     type  %FieldTypes; #REQUIRED
//     value CDATA        "">
/////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT eventOut EMPTY >
// <!ATTLIST eventOut
//     type  %FieldTypes; #REQUIRED
//     name  NMTOKEN      #REQUIRED
//     value CDATA        "">
/////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT field EMPTY >
// <!ATTLIST field
//     type  %FieldTypes; #REQUIRED
//     name  NMTOKEN      #REQUIRED
//     value CDATA        #REQUIRED>
/////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT exposedField    EMPTY >
// <!ATTLIST exposedField
//     type  %FieldTypes; #REQUIRED
//     name  NMTOKEN      #REQUIRED
//     value CDATA        #REQUIRED>
/////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////
// <!ELEMENT Route EMPTY >
// <!ATTLIST Route
//     fromNode    NMTOKEN  #REQUIRED
//     toNode      NMTOKEN  #REQUIRED
//     fromField   CDATA #REQUIRED
//     toField     CDATA #REQUIRED>
/////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void RouteElement() throws ParseException {
        String  name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 261:
      jj_consume_token(261);
      jj_consume_token(5);
      name = FieldString();
                        getRouteInfo().setFromNodeName(name);
      break;
    case 262:
      jj_consume_token(262);
      jj_consume_token(5);
      name = FieldString();
                        getRouteInfo().setToNodeName(name);
      break;
    case 263:
      jj_consume_token(263);
      jj_consume_token(5);
      name = FieldString();
                        getRouteInfo().setFromFieldName(name);
      break;
    case 264:
      jj_consume_token(264);
      jj_consume_token(5);
      name = FieldString();
                        getRouteInfo().setToFieldName(name);
      break;
    default:
      jj_la1[204] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void RouteTag() throws ParseException {
    jj_consume_token(265);
                        RouteInfo info = new RouteInfo();
                        setRouteInfo(info);
  }

  final public void Route() throws ParseException {
    RouteTag();
    label_68:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 261:
      case 262:
      case 263:
      case 264:
        ;
        break;
      default:
        jj_la1[205] = jj_gen;
        break label_68;
      }
      RouteElement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(266);
      break;
    default:
      jj_la1[206] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        RouteInfo info = getRouteInfo();
                        addRoute(info);
  }

  final public void Input() throws ParseException {
    XML();
    jj_consume_token(0);
  }

  public X3DParserTokenManager token_source;
  ASCII_CharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[207];
  final private int[] jj_la1_0 = {0x0,0x0,0x1000000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x1000000,0x0,0x1000000,0x1000000,0x8,0x40,0x180,0x0,0x1000000,0x1000042,0x1000042,0xfe0000,0xfe0000,0x180,0x60000,0x60000,0x180,0xf02e0000,0xf02e0000,0x180,0x60000,0x60000,0x180,0xc60000,0xc60000,0x180,0x60000,0x60000,0x180,0xc60000,0x1000000,0x1000000,0xc60000,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x0,0x0,0x0,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0xc60000,0xc60000,0x180,0xe0000,0xe0000,0x180,0x60000,0x0,0x0,0x60000,0x180,0x60000,0x0,0x0,0x60000,0x180,0xce0000,0xce0000,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0xd00e0000,0xd00e0000,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0x60000,0x0,0x0,0x0,0x0,0x60000,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0xe0000,0xe0000,0x180,0x60000,0x4000000,0x4000000,0x60000,0x180,0x60000,0x60000,0x0,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x0,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0xd0060000,0xd0060000,0x180,0x60000,0x60000,0x180,0xc60000,0xc60000,0x180,0x260000,0x260000,0x180,0x60000,0x60000,0x180,0x60000,0x60000,0x180,0x0,0x0,0x180,};
  final private int[] jj_la1_1 = {0x0,0x20000,0x100000,0x8100000,0x800000,0x0,0x0,0x0,0x0,0x0,0x8120000,0x8120000,0x0,0x8120000,0x8120000,0x0,0x0,0x0,0x0,0x8120000,0x8120000,0x8120000,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x0,0x1fff0,0x1fff0,0x0,0x80000,0x80000,0x0,0x400000,0x400000,0x0,0x6000000,0x8120000,0x8120000,0x6000000,0x0,0x20000000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x20000000,0x20000000,0x0,0x0,0x0,0x40000000,0x0,0x0,0x40000000,0x0,0x0,0x0,0x2001c000,0x2001c000,0x0,0x400000,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x1c000,0x1c000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x20000000,0x20000000,0x0,0x0,0x40000000,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x400002,0x400002,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x800000,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x20000000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x1c000,0x1c000,0x0,0x400002,0x400002,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
  final private int[] jj_la1_2 = {0x8008010,0x0,0x0,0x0,0x80400,0x0,0x0,0x0,0x0,0x0,0x8008010,0x8008010,0x0,0x8008010,0x8008010,0x0,0x0,0x0,0x0,0x8008010,0x8008010,0x8008010,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8008010,0x8008010,0x0,0x0,0x0,0x0,0x0,0xf,0xf,0x0,0x3c0,0x3c0,0x0,0x1000,0x1000,0x0,0xf,0xf,0x0,0x601c0,0x601c0,0x0,0x7e00000,0x7e00000,0x0,0xe0000000,0xe0000000,0x0,0x100,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x2000,0x0,0x0,0x0,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0xf,0x0,0xf,0xf,0x0,0x0,0x0,0x0,0x7000000,0x7000000,0x0,0xe0040000,0xe0040000,0x0,0x0,0x0,0x2000,0x2000,0x0,0x0,0x0,0xf,0xf,0x0,0x2000000,0x2000000,0x0,0x0,0x0,0x0,0xf,0xf,0x0,0x0,0x0,0x0,0x0,0x80400,0x80400,0x0,0x0,0x40000000,0x40000000,0x0,0x0,0x40000,0x40000,0x0,0x7000000,0x7000000,0x0,0xe0040000,0xe0040000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x1000,0x0,0x0,0x0,0x0,0x2000004,0x2000004,0x0,0x2000000,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
  final private int[] jj_la1_3 = {0x0,0x2000000,0x0,0x0,0x201000,0x2,0x0,0x0,0x0,0x2,0x2000002,0x2000002,0x0,0x2000002,0x2000002,0x0,0x0,0x0,0x0,0x2000002,0x2000002,0x2000002,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000002,0x2000002,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0xff8,0xff8,0x0,0x0,0x0,0x0,0x1fc068,0x1fc068,0x0,0x1800000,0x1800000,0x0,0xf8000000,0xf8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400f8,0x0,0x0,0x400f8,0x0,0x10,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x201000,0x201000,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x10000,0x0,0x8000,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
  final private int[] jj_la1_4 = {0x0,0x0,0x880020,0x880020,0x28000,0x0,0x200,0x40000200,0x40000200,0x0,0x880020,0x880020,0x0,0x880020,0x880020,0x0,0x0,0x0,0x0,0x880020,0x880020,0x880020,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x880020,0x880020,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x7,0x0,0x0,0x0,0x0,0x180,0x180,0x0,0x7800,0x0,0x0,0x7800,0x0,0x1800,0x0,0x0,0x1800,0x0,0x0,0x0,0x0,0x600000,0x600000,0x0,0x3e000000,0x3e000000,0x0,0x180,0x180,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180,0x180,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x28000,0x28000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x400000,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x400000,0x0,0x0,0x0,0x0,0x400000,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
  final private int[] jj_la1_5 = {0x10105000,0x80,0x0,0x0,0x4000000,0x1000000,0x20002,0x20002,0x20002,0x1000000,0x11105080,0x11105080,0x0,0x11105080,0x11105080,0x0,0x0,0x0,0x0,0x11105080,0x11105080,0x11105080,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x11105080,0x11105080,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x79,0x79,0x0,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x10000,0x0,0x80000,0x80000,0x0,0xc00000,0xc00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000000,0xc0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x4000000,0x0,0x0,0x400000,0x400000,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc00000,0xc00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
  final private int[] jj_la1_6 = {0x2000222,0x0,0x0,0x0,0x200000,0x20000000,0x0,0x0,0x0,0x20080800,0x22000222,0x22000222,0x0,0x22080a22,0x22080a22,0x0,0x0,0x0,0x0,0x22000222,0x22000222,0x22000222,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x22080a2a,0x22080a2a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180,0x180,0x0,0x0,0x200000,0x200000,0x0,0x0,0x7e000,0x7e000,0x0,0x0,0x0,0x0,0x0,0x1800000,0x1800000,0x0,0x18000000,0x18000000,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
  final private int[] jj_la1_7 = {0x408000,0x20000000,0x2000001,0x2000001,0x20,0x0,0x0,0x400,0x400,0x0,0x22408001,0x22408001,0x0,0x22408001,0x22408001,0x0,0x0,0x0,0x0,0x22408001,0x22408001,0x22408001,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x22408001,0x22408001,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1c,0x1c,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x7000,0x7000,0x0,0x3e0000,0x3e0000,0x0,0x1000200,0x1000200,0x0,0x18000000,0x18000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
  final private int[] jj_la1_8 = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x8,0x200,0x8,0x8,0x0,0x0,0x0,0x1000,0x208,0x208,0x208,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x6,0x0,0x1e0,0x1e0,0x0,};

  public X3DParser(java.io.InputStream stream) {
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new X3DParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 207; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 207; i++) jj_la1[i] = -1;
  }

  public X3DParser(java.io.Reader stream) {
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new X3DParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 207; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 207; i++) jj_la1[i] = -1;
  }

  public X3DParser(X3DParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 207; i++) jj_la1[i] = -1;
  }

  public void ReInit(X3DParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 207; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[273];
    for (int i = 0; i < 273; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 207; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
          if ((jj_la1_7[i] & (1<<j)) != 0) {
            la1tokens[224+j] = true;
          }
          if ((jj_la1_8[i] & (1<<j)) != 0) {
            la1tokens[256+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 273; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
