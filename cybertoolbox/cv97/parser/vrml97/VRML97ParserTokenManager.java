/* Generated By:JavaCC: Do not edit this line. VRML97ParserTokenManager.java */
package cv97.parser.vrml97;
import java.io.*;
import cv97.*;
import cv97.field.*;
import cv97.node.*;
import cv97.util.*;
import cv97.route.*;

public class VRML97ParserTokenManager implements VRML97ParserConstants
{
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x14010080L) != 0L || (active2 & 0xc0000002L) != 0L)
         {
            jjmatchedKind = 224;
            return 26;
         }
         if ((active0 & 0x80000L) != 0L)
            return 17;
         if ((active0 & 0xfffffffffff798c0L) != 0L || (active1 & 0xffffffffebfeff7fL) != 0L || (active2 & 0xffffffff3ffffffdL) != 0L || (active3 & 0x7fffffffL) != 0L)
         {
            jjmatchedKind = 224;
            return 6;
         }
         return -1;
      case 1:
         if ((active0 & 0xfffffffffff398c0L) != 0L || (active1 & 0xffffffffffffefffL) != 0L || (active2 & 0xffffffffffffffffL) != 0L || (active3 & 0x7fffffffL) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 1;
            return 6;
         }
         if ((active0 & 0x40000L) != 0L || (active1 & 0x1000L) != 0L)
            return 6;
         return -1;
      case 2:
         if ((active0 & 0x7ffefdffffd218c0L) != 0L || (active1 & 0xfbfffeff7ffdeffaL) != 0L || (active2 & 0xffffffffffffffffL) != 0L || (active3 & 0x7fffffffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 224;
               jjmatchedPos = 2;
            }
            return 6;
         }
         if ((active0 & 0x8001020000218000L) != 0L || (active1 & 0x400010080020005L) != 0L)
            return 6;
         return -1;
      case 3:
         if ((active0 & 0x482000080000880L) != 0L || (active2 & 0x200L) != 0L || (active3 & 0x44003080L) != 0L)
            return 6;
         if ((active0 & 0x7b7cffff7fd21040L) != 0L || (active1 & 0xfbffffff7ffdeffbL) != 0L || (active2 & 0xfffffffffffffdffL) != 0L || (active3 & 0x3bffcf7fL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 224;
               jjmatchedPos = 3;
            }
            return 6;
         }
         return -1;
      case 4:
         if ((active0 & 0x2070000100021000L) != 0L || (active1 & 0x3019082040240000L) != 0L || (active2 & 0x10000100010020L) != 0L || (active3 & 0x22180002L) != 0L)
            return 6;
         if ((active0 & 0x5b0cfffe7fd00040L) != 0L || (active1 & 0xcbe6f7df3fd9effbL) != 0L || (active2 & 0xffeffffefffefddfL) != 0L || (active3 & 0x19e7ff7dL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 224;
               jjmatchedPos = 4;
            }
            return 6;
         }
         return -1;
      case 5:
         if ((active0 & 0x504cfdde7fc00040L) != 0L || (active1 & 0xc13cf7cf2fcdedf3L) != 0L || (active2 & 0xc7edbedcf7fec5dfL) != 0L || (active3 & 0x1bf7fc2dL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 224;
               jjmatchedPos = 5;
            }
            return 6;
         }
         if ((active0 & 0xb00022000100000L) != 0L || (active1 & 0xac2001010100208L) != 0L || (active2 & 0x3802412208003800L) != 0L || (active3 & 0x350L) != 0L)
            return 6;
         return -1;
      case 6:
         if ((active0 & 0x5244fd6e4fc00040L) != 0L || (active1 & 0xc17c93c62fdded73L) != 0L || (active2 & 0xe72180c0b7fee5dfL) != 0L || (active3 & 0x1bf7fc2dL) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 224;
               jjmatchedPos = 6;
            }
            return 6;
         }
         if ((active0 & 0x8009030000000L) != 0L || (active1 & 0x640900000080L) != 0L || (active2 & 0xcc3e1c40000000L) != 0L)
            return 6;
         return -1;
      case 7:
         if ((active0 & 0x29440a000040L) != 0L || (active1 & 0x402402000a800073L) != 0L || (active2 & 0x701008080a00000L) != 0L || (active3 & 0x840008L) != 0L)
            return 6;
         if ((active0 & 0x5244d42a55c00000L) != 0L || (active1 & 0x815891c6255ded00L) != 0L || (active2 & 0xe0208040375ee5dfL) != 0L || (active3 & 0x1b73fc25L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 224;
               jjmatchedPos = 7;
            }
            return 6;
         }
         return -1;
      case 8:
         if ((active0 & 0x4402240400000L) != 0L || (active1 & 0x40400a100L) != 0L || (active2 & 0xc000000000000104L) != 0L || (active3 & 0x10420c00L) != 0L)
            return 6;
         if ((active0 & 0x5240940815800000L) != 0L || (active1 & 0x817891c2215d4c10L) != 0L || (active2 & 0x20208040375ee4dbL) != 0L || (active3 & 0xb31f025L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 8;
            return 6;
         }
         return -1;
      case 9:
         if ((active0 & 0x240940010800000L) != 0L || (active1 & 0x81609182201d4810L) != 0L || (active2 & 0x20000000374ee45bL) != 0L || (active3 & 0xb31b021L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 224;
               jjmatchedPos = 9;
            }
            return 6;
         }
         if ((active0 & 0x5000000805000000L) != 0L || (active1 & 0x18004001400400L) != 0L || (active2 & 0x20804000100080L) != 0L || (active3 & 0x4004L) != 0L)
            return 6;
         return -1;
      case 10:
         if ((active0 & 0x4240800010000000L) != 0L || (active1 & 0x8120900220154810L) != 0L || (active2 & 0x200000003700e45bL) != 0L || (active3 & 0x810b000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 10;
            return 6;
         }
         if ((active0 & 0x140000800000L) != 0L || (active1 & 0x40018000080000L) != 0L || (active2 & 0x4e0000L) != 0L || (active3 & 0x3210021L) != 0L)
            return 6;
         return -1;
      case 11:
         if ((active0 & 0x200000000000000L) != 0L || (active1 & 0x8000100020000000L) != 0L || (active2 & 0x2000000030008018L) != 0L)
            return 6;
         if ((active0 & 0x4040800010000000L) != 0L || (active1 & 0x120800200154810L) != 0L || (active2 & 0x7006443L) != 0L || (active3 & 0x810b000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 11;
            return 6;
         }
         return -1;
      case 12:
         if ((active1 & 0x20000000010000L) != 0L || (active2 & 0x3L) != 0L || (active3 & 0x8000L) != 0L)
            return 6;
         if ((active0 & 0x4040800010000000L) != 0L || (active1 & 0x100800200144810L) != 0L || (active2 & 0x7006440L) != 0L || (active3 & 0x8103000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 12;
            return 6;
         }
         return -1;
      case 13:
         if ((active0 & 0x4040000010000000L) != 0L || (active1 & 0x200104800L) != 0L || (active2 & 0x7006400L) != 0L || (active3 & 0x8103000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 13;
            return 6;
         }
         if ((active0 & 0x800000000000L) != 0L || (active1 & 0x100800000040010L) != 0L || (active2 & 0x40L) != 0L)
            return 6;
         return -1;
      case 14:
         if ((active1 & 0x200100000L) != 0L || (active2 & 0x2000400L) != 0L)
            return 6;
         if ((active0 & 0x4040000010000000L) != 0L || (active1 & 0x4800L) != 0L || (active2 & 0x5006000L) != 0L || (active3 & 0x8103000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 14;
            return 6;
         }
         return -1;
      case 15:
         if ((active0 & 0x10000000L) != 0L || (active1 & 0x4800L) != 0L || (active3 & 0x8102000L) != 0L)
            return 6;
         if ((active0 & 0x4040000000000000L) != 0L || (active2 & 0x5006000L) != 0L || (active3 & 0x1000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 15;
            return 6;
         }
         return -1;
      case 16:
         if ((active0 & 0x4000000000000000L) != 0L || (active2 & 0x5006000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 16;
            return 6;
         }
         if ((active0 & 0x40000000000000L) != 0L || (active3 & 0x1000L) != 0L)
            return 6;
         return -1;
      case 17:
         if ((active0 & 0x4000000000000000L) != 0L || (active2 & 0x1004000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 17;
            return 6;
         }
         if ((active2 & 0x4002000L) != 0L)
            return 6;
         return -1;
      case 18:
         if ((active0 & 0x4000000000000000L) != 0L || (active2 & 0x1004000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 18;
            return 6;
         }
         return -1;
      case 19:
         if ((active2 & 0x1000000L) != 0L)
            return 6;
         if ((active0 & 0x4000000000000000L) != 0L || (active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 19;
            return 6;
         }
         return -1;
      case 20:
         if ((active0 & 0x4000000000000000L) != 0L || (active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 20;
            return 6;
         }
         return -1;
      case 21:
         if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 21;
            return 6;
         }
         if ((active0 & 0x4000000000000000L) != 0L)
            return 6;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 44:
         return jjStopAtPos(0, 10);
      case 46:
         return jjStartNfaWithStates_0(0, 19, 17);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x44100000L, 0x0L, 0x0L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x1400800000000L, 0x0L, 0x0L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x50d4000000000000L, 0x12L, 0x0L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x800L, 0x0L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4010000L, 0x0L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x480000000L, 0x0L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L, 0x0L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x300900000000000L, 0x0L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000000L, 0x0L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000000L, 0xff80000000010L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L, 0x2840L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3928000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L, 0x0L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x701007fe0c000000L, 0x12L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x40800L, 0x0L, 0x0L, 0x37080L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L, 0x0L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x8400000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x10000000L);
      case 91:
         return jjStopAtPos(0, 13);
      case 93:
         return jjStopAtPos(0, 14);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x4400L, 0x400080L, 0x4L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0xa00003003000000L, 0x8000000L, 0x8000000000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x28000000000040L, 0x8990000200e0000L, 0x0L, 0x8041L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x8000000000008100L, 0x10000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000080L, 0xc0000002L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x1100000000L, 0x100000000L, 0x2000800L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x140000000000L, 0x0L, 0x0L, 0x8L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x4000000000L, 0x100L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L, 0x10000L, 0x40000000L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L, 0x0L, 0x4000000L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x1L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8080000000L, 0x2000028000000000L, 0x200000L, 0x200L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x60L, 0x3c00000200c0000L, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x42000000100000L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1200L, 0x0L, 0x1000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x2000000100400000L, 0x0L, 0x400000000000000L, 0x800000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x1000600000000008L, 0x0L, 0x40000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x402280600000000L, 0x42040200000L, 0x820000000000025L, 0x180100L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x20030000000L, 0x24010000000004L, 0x208L, 0x20200000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L, 0x1400L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x20L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc00000L, 0x0L, 0x0L);
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3000000L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 8);
      case 125:
         return jjStopAtPos(0, 9);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3);
      return 1;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L, active2, 0L, active3, 0L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1400000L, active2, 0L, active3, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L, active2, 0L, active3, 0L);
      case 70:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xffffe00000000L, active3, 0L);
      case 79:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 18, 6);
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0x400000000000000L, active2, 0L, active3, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0L, active2, 0L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0x2800000L, active2, 0L, active3, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L, active1, 0L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1808400000L, active1, 0x5000021000000048L, active2, 0x140000000080040L, active3, 0x400L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000L, active1, 0L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000L, active2, 0xc000000L, active3, 0x180000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x8100008030800000L, active1, 0x2824608008000001L, active2, 0x8000000000001100L, active3, 0x3288L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L, active1, 0L, active2, 0x4L, active3, 0x62L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x402410100000000L, active1, 0x8000000200008920L, active2, 0x280000110048400L, active3, 0x2a404000L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0x280000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000L, active2, 0x20000L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000004000L, active2, 0x10002L, active3, 0L);
      case 110:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 76, 6);
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0x300800010002080L, active2, 0L, active3, 0x40000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x7afd022080000000L, active1, 0xdb014580340004L, active2, 0x810000001b02810L, active3, 0x10850800L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0x40040000000L, active2, 0x7020000000000021L, active3, 0x4L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x144000200000L, active1, 0x80020080000L, active2, 0x400000002004008L, active3, 0x1220000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000L, active1, 0x2000000000L, active2, 0x400000L, active3, 0x100L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0x800000400L, active2, 0x20000000L, active3, 0x4000001L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xc0000080L, active3, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0x4000000L, active2, 0L, active3, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x12L, active2, 0x200L, active3, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3);
      return 2;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80400000000L, active3, 0L);
      case 68:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 122, 6);
         break;
      case 69:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 6);
         break;
      case 70:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x100800000000L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x201000000000L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x1080L, active1, 0L, active2, 0L, active3, 0L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x402000000000L, active3, 0L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x804000000000L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1008000000000L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x2010000000000L, active3, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x20800L, active1, 0L, active2, 0L, active3, 0L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0xc060000000000L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0x140000000080L, active2, 0x8020000004030188L, active3, 0x3a0002L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800100000L, active1, 0L, active2, 0x201000L, active3, 0x8000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000040000000L, active1, 0x100800010000008L, active2, 0L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x90000L, active2, 0x1c0000021L, active3, 0x2400000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0x8000008000000200L, active2, 0L, active3, 0x40000000L);
      case 103:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 95, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x108000000L, active2, 0L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x3000000000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2100800000000040L, active1, 0x41400000L, active2, 0x400000000904006L, active3, 0x1000030L);
      case 108:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x7c400000000000L, active1, 0x210000000240012L, active2, 0L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000L, active2, 0L, active3, 0x4004000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0x1880020400000020L, active2, 0x280000000040000L, active3, 0xa00L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x5000144483000000L, active1, 0x9080020000000L, active2, 0x4000000002000000L, active3, 0x48L);
      case 112:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20004000000L, active1, 0x610002800000L, active2, 0x200L, active3, 0x4L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0x42004000108800L, active2, 0x18002800L, active3, 0x10000100L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0xa00000100L, active2, 0x21000400L, active3, 0x8800000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0xa00002108000000L, active1, 0x4000000004002400L, active2, 0x400000L, active3, 0x20040001L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x810000000000000L, active3, 0x10000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x50L, active3, 0L);
      case 119:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 81, 6);
         break;
      case 120:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000L, active1, 0x24000000000040L, active2, 0x140000000088000L, active3, 0x3480L);
      case 121:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x280000000000L, active1, 0x2000000001L, active2, 0L, active3, 0L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0x60L, active2, 0L, active3, 0L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0xc0000000000000L, active3, 0L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0x24000010000000L, active2, 0L, active3, 0L);
      case 69:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x300000000000000L, active3, 0L);
      case 76:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 6);
         break;
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0xc0000L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0L, active2, 0L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0x10100000000L, active2, 0L, active3, 0L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0x2880000L, active2, 0x200000L, active3, 0x40000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x100800000L, active1, 0x40000000000L, active2, 0x1L, active3, 0x10020L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x100L, active3, 0L);
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 6);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 6);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 6);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 137, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000L, active1, 0x6100e0000000a800L, active2, 0x300c06001040c020L, active3, 0x1004004L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0x1000120000000000L, active2, 0x10000L, active3, 0x200L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000100000L, active1, 0L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0x20000520820401aL, active2, 0x2010009000450L, active3, 0x8800140L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000000L, active1, 0x100L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0xc400000000040L, active1, 0x2000000000L, active2, 0x100904000000L, active3, 0x32188000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x42000001500000L, active2, 0x8000000000002800L, active3, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000004000000000L, active1, 0x40000000L, active2, 0x102010c092000cL, active3, 0x220000L);
      case 111:
         if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 222, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x70000000000000L, active1, 0x10000000040400L, active2, 0x400c86600000000L, active3, 0L);
      case 112:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 6);
         else if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 218, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L, active2, 0L, active3, 0x2L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x5000000200000000L, active1, 0x9000004000000L, active2, 0x800000000000000L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0x20000200L, active2, 0x2L, active3, 0L);
      case 116:
         if ((active3 & 0x80L) != 0L)
         {
            jjmatchedKind = 199;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0xa0000a030000000L, active1, 0x800008c00000000L, active2, 0x4021008020001080L, active3, 0x3810L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x140000000000L, active1, 0x80000000000L, active2, 0L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000010000L, active2, 0L, active3, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000L);
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0x3000000L, active1, 0L, active2, 0x2000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100L, active2, 0L, active3, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0L, active2, 0L, active3, 0L);
      case 69:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 6);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4000000000000000L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0x400L, active2, 0L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0x400000000L, active2, 0L, active3, 0x4800L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0x8000000000L, active2, 0L, active3, 0L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x9000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 87:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0x42600010110001L, active2, 0xc0000004002880L, active3, 0x4L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0x200000000L, active2, 0x400L, active3, 0x8000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2808800L, active2, 0x80c060010000000L, active3, 0x50L);
      case 100:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 85, 6);
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 133, 6);
         else if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 160;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 180, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x5000000000000040L, active1, 0x8000000000000L, active2, 0x402000000000L, active3, 0x12000000L);
      case 101:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 94, 6);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 6);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 124, 6);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 144, 6);
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 193, 6);
         else if ((active3 & 0x80000L) != 0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 221, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x880100001404200L, active2, 0x20010L, active3, 0x108008L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0L, active2, 0x40L, active3, 0L);
      case 104:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0L, active2, 0L, active3, 0x10020L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0xc000000000000L, active1, 0x40800000000L, active2, 0x20000002000004L, active3, 0L);
      case 108:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 125, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000080L, active2, 0x80400008100L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0L, active2, 0x2010000000000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x1c0000000000L, active1, 0x200000008002072L, active2, 0x404000L, active3, 0x1000100L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0xa00202040100000L, active1, 0x24010000000000L, active2, 0x100a000c1000L, active3, 0L);
      case 112:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 107, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0x400000L);
      case 114:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40020008800000L, active1, 0x4010000000040000L, active2, 0x3701008000000000L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20080000L, active2, 0xaL, active3, 0x220000L);
      case 116:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x14200000000L, active1, 0L, active2, 0xa050c1b00000L, active3, 0x840200L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x30000000L, active1, 0x8000020004000008L, active2, 0x1L, active3, 0x3000L);
      case 120:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100800000000000L, active2, 0L, active3, 0x400L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0L);
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3);
      return 5;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x4020000000000L, active3, 0L);
      case 51:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x8241000000000L, active3, 0L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000000L, active2, 0L, active3, 0L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L, active1, 0x8000000L, active2, 0L, active3, 0x20L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0x18000000000000L, active2, 0x40000000L, active3, 0x10008000L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x80000000L, active3, 0x2100000L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000L, active2, 0x820000L, active3, 0x10000L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0x100000000000L, active2, 0x8010L, active3, 0L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x14000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000L, active2, 0x20904800000040L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0xc0000000000000L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x8140000000000L, active1, 0x12L, active2, 0L, active3, 0L);
      case 101:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 121, 6);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 165, 6);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 168, 6);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 174, 6);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 177, 6);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 187, 6);
         else if ((active2 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 188;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 198, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x1400000L, active1, 0x100800000080080L, active2, 0x2000000000000000L, active3, 0x4000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0x800000400L, active2, 0L, active3, 0x20001L);
      case 103:
         if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 200, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0x60L, active2, 0L, active3, 0L);
      case 104:
         if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 196, 6);
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 201, 6);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x500000040a800000L, active1, 0x4000000202800000L, active2, 0xc401008001200502L, active3, 0x8840000L);
      case 108:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 6);
         else if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 161, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0x40000000100001L, active2, 0x2001L, active3, 0x200000L);
      case 109:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200002000000000L, active1, 0L, active2, 0x2000000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40001404100L, active2, 0x4L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0x2400c000000000L, active2, 0x300080400000000L, active3, 0x400000L);
      case 112:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 92, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000L, active2, 0x8L, active3, 0L);
      case 114:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 6);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 123, 6);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 140, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x9834000040L, active1, 0L, active2, 0x4000080L, active3, 0x3004L);
      case 115:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0x8000000004002000L, active2, 0xc0000L, active3, 0L);
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 6);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 6);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 155, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x600400018800L, active2, 0x10004000L, active3, 0x1000c08L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x400000L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0L);
      case 120:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 119, 6);
         break;
      case 121:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 100, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3);
      return 6;
   }
   switch(curChar)
   {
      case 50:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 164, 6);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 173, 6);
         break;
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0x80000L, active2, 0L, active3, 0x1L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000000L, active2, 0x4002000L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10000000L, active3, 0L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000L, active2, 0L, active3, 0L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x200800000000000L, active1, 0x8000000000L, active2, 0L, active3, 0L);
      case 83:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 109, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x2000000000000080L, active3, 0L);
      case 84:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 110, 6);
         break;
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000c000000L, active1, 0x4000000008000000L, active2, 0x20404009L, active3, 0x1200004L);
      case 100:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100800000000000L, active2, 0x8000000000000000L, active3, 0L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 6);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 96, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000040L, active1, 0x8000100020040012L, active2, 0x828014L, active3, 0x13400L);
      case 102:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 169, 6);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 170, 6);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 178, 6);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 179, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400L, active2, 0L, active3, 0x2000000L);
      case 103:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 106, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000100L, active2, 0x4000000000000100L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000200000000L, active1, 0x401a800L, active2, 0x21c0000L, active3, 0x400000L);
      case 107:
         if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 182, 6);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 183, 6);
         break;
      case 108:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 6);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x80040000000L, active1, 0x200000060L, active2, 0x20000000000400L, active3, 0x8000000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0L, active2, 0L, active3, 0L);
      case 110:
         if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 158, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x5040000001000000L, active1, 0x18004002800000L, active2, 0x301008000000000L, active3, 0x1000c000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x200800000000L, active1, 0x10000000000L, active2, 0x1200000L, active3, 0x860000L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active1, 0L, active2, 0L, active3, 0L);
      case 114:
         if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 162, 6);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 171, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x14000000000L, active1, 0x24000000000000L, active2, 0L, active3, 0x100008L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1400000L, active2, 0L, active3, 0L);
      case 116:
         if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 163, 6);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 172, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L, active1, 0x4000L, active2, 0x400804000000040L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1L, active2, 0x80000000L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x2L, active3, 0L);
      case 121:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 99, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0x800L);
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3);
      return 7;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L, active3, 0x1000L);
      case 70:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000000000L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L, active1, 0L, active2, 0L, active3, 0x2000L);
      case 86:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x5200000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0L);
      case 100:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x38000000000000L, active2, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 25, 6);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 6);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 43, 6);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(7, 64, 6);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 69, 6);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 6);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 105, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0x100000L, active2, 0x2000000000000002L, active3, 0L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000L);
      case 103:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 87, 6);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 89, 6);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 167, 6);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 176, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4000000000000100L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L, active1, 0x8201400000L, active2, 0x208040000004c0L, active3, 0x8100000L);
      case 108:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 27, 6);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 38, 6);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 40, 6);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 126, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000100L, active2, 0x20000000L, active3, 0x800L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L, active1, 0L, active2, 0L, active3, 0L);
      case 110:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 6, 6);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 149, 6);
         else if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 210, 6);
         else if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 215, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0x40004000000L, active1, 0x40000000080000L, active2, 0x5022000L, active3, 0x410405L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x4900000000000L, active1, 0x4018800L, active2, 0L, active3, 0x20L);
      case 112:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 91, 6);
         break;
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 45, 6);
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x402000000000L, active1, 0x40010L, active2, 0x9L, active3, 0x20000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400L, active2, 0x4L, active3, 0x4000L);
      case 116:
         if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 151, 6);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 159, 6);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 184, 6);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 185, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000001800000L, active1, 0x14000002000L, active2, 0x80000000024c4000L, active3, 0x1208000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L, active1, 0L, active2, 0x10000000L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000000L, active2, 0x8010L, active3, 0L);
      case 121:
         if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 186, 6);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 195, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3);
      return 8;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x3L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000000000L, active2, 0x1000000L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10L, active2, 0L, active3, 0L);
      case 86:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x804000000000L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L, active1, 0L, active2, 0L, active3, 0x4L);
      case 100:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 46, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L, active1, 0x40000000000000L, active2, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 33, 6);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 72, 6);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 98, 6);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 203, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0x40000001000000L, active1, 0x18000000000400L, active2, 0x8L, active3, 0x108000L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L, active1, 0x8000080000L, active2, 0L, active3, 0x1L);
      case 104:
         if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 191, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L, active1, 0x100000000000000L, active2, 0x4c4000L, active3, 0x3200020L);
      case 108:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 37, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 109:
         if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 209, 6);
         break;
      case 110:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 50, 6);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 79, 6);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 90, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L, active1, 0x14800L, active2, 0x2000000000000000L, active3, 0L);
      case 111:
         if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 220, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000001400000L, active2, 0x804000000040L, active3, 0x5000L);
      case 112:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 30, 6);
         break;
      case 114:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 22, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000L, active1, 0x100000L, active2, 0L, active3, 0x2000L);
      case 115:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 130, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x20000L, active3, 0x10000L);
      case 116:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 136, 6);
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 190, 6);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 202, 6);
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 214, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0x5000800000000000L, active1, 0x110220000000L, active2, 0x1400a410L, active3, 0x8000000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0L);
      case 121:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 77, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x2000000L, active3, 0L);
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x20000000000080L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3);
      return 9;
   }
   switch(curChar)
   {
      case 71:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000L, active2, 0L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x2000000L, active3, 0L);
      case 86:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x800010000000L, active1, 0x800L, active2, 0x20000000L, active3, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000000L, active2, 0L, active3, 0x20L);
      case 100:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 35, 6);
         break;
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 26, 6);
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(9, 135, 6);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 181, 6);
         else if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(9, 194, 6);
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L, active1, 0x40000000040010L, active2, 0x4002000L, active3, 0x2000000L);
      case 104:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000000L, active1, 0x20000000L, active2, 0L, active3, 0L);
      case 108:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 102, 6);
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000L, active1, 0x8000000000080000L, active2, 0L, active3, 0x1L);
      case 110:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(9, 86, 6);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(9, 88, 6);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 166, 6);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 175, 6);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x120000000000000L, active2, 0x1000048L, active3, 0x100000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000800000L, active1, 0x10000000000L, active2, 0x4e4003L, active3, 0x1211000L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x10000000L, active3, 0L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(9, 24, 6);
         else if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(9, 206, 6);
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active3, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3, 0L);
      case 116:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(9, 74, 6);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(9, 148, 6);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000000000L, active2, 0x8010L, active3, 0L);
      case 120:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 115, 6);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 116, 6);
         break;
      case 121:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000000L, active2, 0x400L, active3, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, active3);
      return 10;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000000L, active1, 0L, active2, 0x40L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x400L, active3, 0L);
      case 82:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000000L, active2, 0L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x8L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000000000000L, active2, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 42, 6);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(10, 83, 6);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(10, 192, 6);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(10, 197, 6);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100800000104000L, active2, 0x2000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800L, active2, 0x3L, active3, 0L);
      case 109:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 104, 6);
         break;
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(10, 23, 6);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(10, 146, 6);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(10, 147, 6);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(10, 150, 6);
         else if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(10, 213, 6);
         else if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(10, 216, 6);
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000L, active1, 0x10L, active2, 0x4000L, active3, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8000000020000000L, active2, 0x2000000000000000L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 44, 6);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(10, 145, 6);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(10, 208, 6);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100000050000L, active2, 0x400a010L, active3, 0x1000L);
      case 116:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 103, 6);
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L, active1, 0L, active2, 0x21000000L, active3, 0x100000L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000000L, active1, 0L, active2, 0x10000000L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000L);
      case 119:
         if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(10, 217, 6);
         break;
      case 120:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 118, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, active3);
      return 11;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x4000L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x800L, active2, 0L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x100800000000000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200000000L, active2, 0L, active3, 0x108000L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000L);
      case 101:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 108, 6);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(11, 132, 6);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(11, 143, 6);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(11, 157, 6);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20000000000000L, active2, 0x1000000L, active3, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L, active1, 0x10000L, active2, 0x400L, active3, 0L);
      case 110:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(11, 93, 6);
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000000L, active1, 0x4000L, active2, 0x2000040L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000000000L, active1, 0L, active2, 0x3L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x4002000L, active3, 0L);
      case 114:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 127, 6);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 189, 6);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x100000L, active2, 0L, active3, 0L);
      case 115:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 57, 6);
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000L, active1, 0x10L, active2, 0L, active3, 0x2000L);
      case 116:
         if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(11, 156, 6);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0L);
      case 121:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(11, 131, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2, active3);
      return 12;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(12, 80, 6);
         break;
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x100800000040000L, active2, 0L, active3, 0L);
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000L, active1, 0L, active2, 0x40L, active3, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800L, active2, 0L, active3, 0x1000L);
      case 108:
         if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(12, 207, 6);
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x400L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x200000000L, active2, 0x4000L, active3, 0x8000000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000L, active1, 0x10L, active2, 0x4002000L, active3, 0L);
      case 114:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(12, 128, 6);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(12, 129, 6);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x4000L, active2, 0x2000000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000000000000L, active1, 0x100000L, active2, 0L, active3, 0x100000L);
      case 120:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 117, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, active2, active3);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000000000L, active1, 0x100000L, active2, 0L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x200000800L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x4000L, active2, 0x400L, active3, 0x100000L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x4002000L, active3, 0L);
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 47, 6);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000L);
      case 111:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(13, 134, 6);
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000L, active1, 0L, active2, 0x2000000L, active3, 0x2000L);
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0L);
      case 114:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(13, 68, 6);
         break;
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000L);
      case 116:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 111, 6);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 120, 6);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x4000L, active3, 0L);
      case 120:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(13, 82, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(12, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, active2, active3);
      return 14;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x4002000L, active3, 0x1000L);
      case 101:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(14, 97, 6);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x4000L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x800L, active2, 0L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0x8100000L);
      case 114:
         if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(14, 153, 6);
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000010000000L, active1, 0L, active2, 0L, active3, 0x2000L);
      case 116:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(14, 138, 6);
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000000000L, active1, 0x4000L, active2, 0L, active3, 0L);
      case 120:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(14, 84, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(13, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1, active2, active3);
      return 15;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0L);
      case 109:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(15, 28, 6);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(15, 205, 6);
         break;
      case 110:
         if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(15, 212, 6);
         break;
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 114:
         if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(15, 219, 6);
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x4000L, active3, 0L);
      case 116:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(15, 75, 6);
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x4002000L, active3, 0x1000L);
      case 121:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(15, 78, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(14, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L, active2, active3);
      return 16;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active2, 0x1000000L, active3, 0L);
      case 101:
         if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(16, 204, 6);
         break;
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000000000000L, active2, 0x4002000L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active2, 0x4000L, active3, 0L);
      case 114:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 54, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L, active2, active3);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(15, old0, 0L, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L, active2, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active2, 0x4000L);
      case 114:
         if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(17, 141, 6);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(17, 154, 6);
         break;
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active2, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L, active2, 0L);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(16, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L, active2, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa19_0(active0, 0x4000000000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active2, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active2, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L, active2, 0L);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(17, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L, active2, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active2, 0x4000L);
      case 114:
         if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(19, 152, 6);
         break;
      case 116:
         return jjMoveStringLiteralDfa20_0(active0, 0x4000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L, active2, 0L);
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(18, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L, active2, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa21_0(active0, 0x4000000000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active2, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L, active2, 0L);
}
private final int jjMoveStringLiteralDfa21_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(19, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L, active2, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active2, 0x4000L);
      case 114:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 62, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L, active2, 0L);
}
private final int jjMoveStringLiteralDfa22_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(20, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, 0L, active2, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 114:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(22, 142, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, 0L, active2, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 41;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 223)
                        kind = 223;
                     jjCheckNAddStates(0, 5);
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(6, 9);
                  else if (curChar == 46)
                     jjCheckNAdd(17);
                  else if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 35)
                     jjCheckNAddStates(13, 15);
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 228)
                        kind = 228;
                     jjCheckNAdd(27);
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(27);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 224)
                        kind = 224;
                     jjCheckNAdd(6);
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 2:
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 224)
                     kind = 224;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  break;
               case 8:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 10:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 11:
                  if (curChar == 34 && kind > 225)
                     kind = 225;
                  break;
               case 12:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(16, 19);
                  break;
               case 13:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 14:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 16:
                  if (curChar == 46)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddStates(20, 22);
                  break;
               case 19:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 227)
                     kind = 227;
                  jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 228)
                     kind = 228;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(6, 9);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 223)
                     kind = 223;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if (curChar != 46)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddStates(23, 25);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddStates(23, 25);
                  break;
               case 34:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddTwoStates(35, 21);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddStates(26, 28);
                  break;
               case 38:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddTwoStates(39, 21);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 223)
                     kind = 223;
                  jjCheckNAddStates(0, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 224)
                        kind = 224;
                     jjCheckNAdd(6);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(29, 30);
                  break;
               case 26:
               case 6:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 224)
                     kind = 224;
                  jjCheckNAdd(6);
                  break;
               case 1:
                  jjAddStates(13, 15);
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 224)
                     kind = 224;
                  jjCheckNAdd(6);
                  break;
               case 8:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 9:
                  if (curChar == 92)
                     jjAddStates(31, 33);
                  break;
               case 10:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 18:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(34, 35);
                  break;
               case 21:
                  if ((0x5000000050L & l) != 0L && kind > 226)
                     kind = 226;
                  break;
               case 23:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 227)
                     kind = 227;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(29, 30);
                  break;
               case 33:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 37:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(13, 15);
                  break;
               case 8:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(10, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 41 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   29, 30, 31, 36, 37, 21, 29, 30, 16, 36, 8, 9, 11, 1, 2, 4, 
   8, 9, 13, 11, 17, 18, 21, 32, 33, 21, 36, 37, 21, 26, 27, 10, 
   12, 14, 19, 20, 34, 35, 38, 39, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\143\150\151\154\144\162\145\156", 
"\116\125\114\114", "\173", "\175", "\54", "\124\122\125\105", "\106\101\114\123\105", "\133", 
"\135", "\104\105\106", "\125\123\105", "\122\117\125\124\105", "\124\117", "\56", 
"\101\156\143\150\157\162", "\165\162\154", "\160\141\162\141\155\145\164\145\162", 
"\144\145\163\143\162\151\160\164\151\157\156", "\142\142\157\170\103\145\156\164\145\162", 
"\142\142\157\170\123\151\172\145", "\101\160\160\145\141\162\141\156\143\145", 
"\155\141\164\145\162\151\141\154", "\164\145\170\164\165\162\145\124\162\141\156\163\146\157\162\155", 
"\164\145\170\164\165\162\145", "\101\165\144\151\157\103\154\151\160", "\154\157\157\160", 
"\160\151\164\143\150", "\163\164\141\162\164\124\151\155\145", "\163\164\157\160\124\151\155\145", 
"\102\141\143\153\147\162\157\165\156\144", "\142\141\143\153\125\162\154", "\142\157\164\164\157\155\125\162\154", 
"\146\162\157\156\164\125\162\154", "\154\145\146\164\125\162\154", "\162\151\147\150\164\125\162\154", 
"\164\157\160\125\162\154", "\147\162\157\165\156\144\101\156\147\154\145", 
"\163\153\171\101\156\147\154\145", "\147\162\157\165\156\144\103\157\154\157\162", 
"\163\153\171\103\157\154\157\162", "\102\151\154\154\142\157\141\162\144", 
"\141\170\151\163\117\146\122\157\164\141\164\151\157\156", "\102\157\170", "\163\151\172\145", "\103\157\154\154\151\163\151\157\156", 
"\143\157\154\154\151\144\145", "\103\157\154\157\162", "\143\157\154\157\162", 
"\103\157\154\157\162\111\156\164\145\162\160\157\154\141\164\157\162", "\103\157\156\145", "\150\145\151\147\150\164", 
"\142\157\164\164\157\155\122\141\144\151\165\163", "\163\151\144\145", "\142\157\164\164\157\155", 
"\103\157\157\162\144\151\156\141\164\145", "\160\157\151\156\164", 
"\103\157\157\162\144\151\156\141\164\145\111\156\164\145\162\160\157\154\141\164\157\162", "\153\145\171", "\153\145\171\126\141\154\165\145", 
"\103\171\154\151\156\144\145\162", "\164\157\160", "\162\141\144\151\165\163", 
"\103\171\154\151\156\144\145\162\123\145\156\163\157\162", "\155\151\156\101\156\147\154\145", "\155\141\170\101\156\147\154\145", 
"\145\156\141\142\154\145\144", "\144\151\163\153\101\156\147\154\145", "\157\146\146\163\145\164", 
"\141\165\164\157\117\146\146\163\145\164", "\104\151\162\145\143\164\151\157\156\141\154\114\151\147\150\164", 
"\157\156", "\151\156\164\145\156\163\151\164\171", 
"\141\155\142\151\145\156\164\111\156\164\145\156\163\151\164\171", "\144\151\162\145\143\164\151\157\156", 
"\105\154\145\166\141\164\151\157\156\107\162\151\144", "\143\143\167", "\143\157\154\157\162\120\145\162\126\145\162\164\145\170", 
"\143\162\145\141\163\145\101\156\147\154\145", "\156\157\162\155\141\154\120\145\162\126\145\162\164\145\170", 
"\163\157\154\151\144", "\170\104\151\155\145\156\163\151\157\156", 
"\170\123\160\141\143\151\156\147", "\172\104\151\155\145\156\163\151\157\156", 
"\172\123\160\141\143\151\156\147", "\105\170\164\162\165\163\151\157\156", "\142\145\147\151\156\103\141\160", 
"\145\156\144\103\141\160", "\143\162\157\163\163\123\145\143\164\151\157\156", "\163\160\151\156\145", 
"\106\157\147", "\146\157\147\124\171\160\145", 
"\166\151\163\151\142\151\154\151\164\171\122\141\156\147\145", "\106\157\156\164\123\164\171\154\145", "\152\165\163\164\151\146\171", 
"\146\141\155\151\154\171", "\163\164\171\154\145", "\150\157\162\151\172\157\156\164\141\154", 
"\154\145\146\164\124\157\122\151\147\150\164", "\164\157\160\124\157\102\157\164\164\157\155", 
"\154\141\156\147\165\141\147\145", "\163\160\141\143\151\156\147", "\107\162\157\165\160", 
"\111\155\141\147\145\124\145\170\164\165\162\145", "\162\145\160\145\141\164\123", "\162\145\160\145\141\164\124", 
"\111\156\144\145\170\145\144\106\141\143\145\123\145\164", "\143\157\157\162\144", "\156\157\162\155\141\154", 
"\164\145\170\103\157\157\162\144", "\143\157\157\162\144\111\156\144\145\170", 
"\143\157\154\157\162\111\156\144\145\170", "\164\145\170\103\157\157\162\144\111\156\144\145\170", 
"\156\157\162\155\141\154\111\156\144\145\170", "\143\157\156\166\145\170", 
"\111\156\144\145\170\145\144\114\151\156\145\123\145\164", "\111\156\154\151\156\145", "\114\117\104", "\143\145\156\164\145\162", 
"\162\141\156\147\145", "\154\145\166\145\154", "\115\141\164\145\162\151\141\154", 
"\144\151\146\146\165\163\145\103\157\154\157\162", "\163\160\145\143\165\154\141\162\103\157\154\157\162", 
"\145\155\151\163\163\151\166\145\103\157\154\157\162", "\163\150\151\156\151\156\145\163\163", 
"\164\162\141\156\163\160\141\162\145\156\143\171", "\115\157\166\151\145\124\145\170\164\165\162\145", "\163\160\145\145\144", 
"\116\141\166\151\147\141\164\151\157\156\111\156\146\157", "\141\166\141\164\141\162\123\151\172\145", 
"\150\145\141\144\154\151\147\150\164", "\164\171\160\145", 
"\166\151\163\151\142\151\154\151\164\171\114\151\155\151\164", "\116\157\162\155\141\154", "\166\145\143\164\157\162", 
"\116\157\162\155\141\154\111\156\164\145\162\160\157\154\141\164\157\162", 
"\117\162\151\145\156\164\141\164\151\157\156\111\156\164\145\162\160\157\154\141\164\157\162", "\120\151\170\145\154\124\145\170\164\165\162\145", "\151\155\141\147\145", 
"\120\154\141\156\145\123\145\156\163\157\162", "\155\151\156\120\157\163\151\164\151\157\156", 
"\155\141\170\120\157\163\151\164\151\157\156", "\120\157\151\156\164\114\151\147\150\164", 
"\154\157\143\141\164\151\157\156", "\141\164\164\145\156\165\141\164\151\157\156", 
"\120\157\151\156\164\123\145\164", 
"\120\157\163\151\164\151\157\156\111\156\164\145\162\160\157\154\141\164\157\162", "\120\162\157\170\151\155\151\164\171\123\145\156\163\157\162", 
"\123\143\141\154\141\162\111\156\164\145\162\160\157\154\141\164\157\162", "\123\143\162\151\160\164", 
"\144\151\162\145\143\164\117\165\164\160\165\164", "\155\165\163\164\105\166\141\154\165\141\164\145", 
"\145\166\145\156\164\111\156", "\145\166\145\156\164\117\165\164", "\146\151\145\154\144", 
"\123\106\102\157\157\154", "\123\106\103\157\154\157\162", "\123\106\106\154\157\141\164", 
"\123\106\111\156\164\63\62", "\123\106\116\157\144\145", "\123\106\122\157\164\141\164\151\157\156", 
"\123\106\123\164\162\151\156\147", "\123\106\124\151\155\145", "\123\106\126\145\143\62\146", 
"\123\106\126\145\143\63\146", "\115\106\103\157\154\157\162", "\115\106\106\154\157\141\164", 
"\115\106\111\156\164\63\62", "\115\106\116\157\144\145", "\115\106\122\157\164\141\164\151\157\156", 
"\115\106\123\164\162\151\156\147", "\115\106\124\151\155\145", "\115\106\126\145\143\62\146", 
"\115\106\126\145\143\63\146", "\123\157\165\156\144", "\163\160\141\164\151\141\154\151\172\145", 
"\155\141\170\102\141\143\153", "\155\151\156\102\141\143\153", "\155\141\170\106\162\157\156\164", 
"\155\151\156\106\162\157\156\164", "\160\162\151\157\162\151\164\171", "\163\157\165\162\143\145", 
"\123\160\150\145\162\145", "\123\160\150\145\162\145\123\145\156\163\157\162", 
"\123\160\157\164\114\151\147\150\164", "\142\145\141\155\127\151\144\164\150", 
"\143\165\164\117\146\146\101\156\147\154\145", "\123\150\141\160\145", "\141\160\160\145\141\162\141\156\143\145", 
"\147\145\157\155\145\164\162\171", "\123\167\151\164\143\150", "\167\150\151\143\150\103\150\157\151\143\145", 
"\143\150\157\151\143\145", "\124\145\170\164", "\163\164\162\151\156\147", "\154\145\156\147\164\150", 
"\155\141\170\105\170\164\145\156\164", "\146\157\156\164\123\164\171\154\145", 
"\124\145\170\164\165\162\145\103\157\157\162\144\151\156\141\164\145", "\124\145\170\164\165\162\145\124\162\141\156\163\146\157\162\155", 
"\124\151\155\145\123\145\156\163\157\162", "\143\171\143\154\145\111\156\164\145\162\166\141\154", 
"\124\157\165\143\150\123\145\156\163\157\162", "\124\162\141\156\163\146\157\162\155", "\162\157\164\141\164\151\157\156", 
"\163\143\141\154\145", "\163\143\141\154\145\117\162\151\145\156\164\141\164\151\157\156", 
"\164\162\141\156\163\154\141\164\151\157\156", "\126\151\145\167\160\157\151\156\164", "\160\157\163\151\164\151\157\156", 
"\157\162\151\145\156\164\141\164\151\157\156", "\146\151\145\154\144\117\146\126\151\145\167", "\152\165\155\160", 
"\126\151\163\151\142\151\154\151\164\171\123\145\156\163\157\162", "\127\157\162\154\144\111\156\146\157", "\164\151\164\154\145", 
"\151\156\146\157", null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffffffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 0x0L, 0x0L, 
};
private ASCII_CharStream input_stream;
private final int[] jjrounds = new int[41];
private final int[] jjstateSet = new int[82];
protected char curChar;
public VRML97ParserTokenManager(ASCII_CharStream stream)
{
   if (ASCII_CharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public VRML97ParserTokenManager(ASCII_CharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(ASCII_CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 41; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(ASCII_CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
